
Temp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000006c4  00000738  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000780  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011ca  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000924  00000000  00000000  00001a96  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000994  00000000  00000000  000023ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  00002d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000581  00000000  00000000  00002f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000820  00000000  00000000  00003491  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003cb1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 14 01 	call	0x228	; 0x228 <main>
  7a:	0c 94 60 03 	jmp	0x6c0	; 0x6c0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Init>:
#include "ADC.h"

void ADC_Init(void)
{
 // AREF = AVcc
 ADMUX = (1<<REFS0);
  82:	80 e4       	ldi	r24, 0x40	; 64
  84:	87 b9       	out	0x07, r24	; 7
 // ADC Enable and prescaler of 128

 ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  86:	87 e8       	ldi	r24, 0x87	; 135
  88:	86 b9       	out	0x06, r24	; 6
  8a:	08 95       	ret

0000008c <ADC_readChannel>:

u16 ADC_readChannel (u8 channel)
{
	// select the corresponding channel 0~7

	channel &= 0b00000111;  // AND operation with 7
  8c:	87 70       	andi	r24, 0x07	; 7
	 ADMUX = (ADMUX & 0xF8)|channel;
  8e:	97 b1       	in	r25, 0x07	; 7
  90:	98 7f       	andi	r25, 0xF8	; 248
  92:	89 2b       	or	r24, r25
  94:	87 b9       	out	0x07, r24	; 7
	 // start single conversion
	 // write '1' to ADSC
	 ADCSRA |= (1<<ADSC);
  96:	86 b1       	in	r24, 0x06	; 6
  98:	80 64       	ori	r24, 0x40	; 64
  9a:	86 b9       	out	0x06, r24	; 6

	 // wait for conversion to complete
	 // ADSC becomes '0' again
	 while(ADCSRA & (1<<ADSC));
  9c:	36 99       	sbic	0x06, 6	; 6
  9e:	fe cf       	rjmp	.-4      	; 0x9c <ADC_readChannel+0x10>
	 return (ADC);
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	95 b1       	in	r25, 0x05	; 5
	}
  a4:	08 95       	ret

000000a6 <Set_GroupDir>:

//	 For Group Of Pins

void Set_GroupDir (GroupName_t group, u8 value)							// Function to set direction of group of pins
{
	switch (group)
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	41 f0       	breq	.+16     	; 0xba <Set_GroupDir+0x14>
  aa:	28 f0       	brcs	.+10     	; 0xb6 <Set_GroupDir+0x10>
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	39 f0       	breq	.+14     	; 0xbe <Set_GroupDir+0x18>
  b0:	83 30       	cpi	r24, 0x03	; 3
  b2:	39 f0       	breq	.+14     	; 0xc2 <Set_GroupDir+0x1c>
  b4:	08 95       	ret
	{
	case PORT_A:
		DDRA = value;
  b6:	6a bb       	out	0x1a, r22	; 26
		break;
  b8:	08 95       	ret
	case PORT_B:
		DDRB = value;
  ba:	67 bb       	out	0x17, r22	; 23
		break;
  bc:	08 95       	ret
	case PORT_C:
		DDRC = value;
  be:	64 bb       	out	0x14, r22	; 20
		break;
  c0:	08 95       	ret
	case PORT_D:
		DDRD = value;
  c2:	61 bb       	out	0x11, r22	; 17
  c4:	08 95       	ret

000000c6 <Send_CMD>:

void Display_Str_Row_Col (u8 row, u8 col, const u8 *str)	//Display string at specified row and column
{
	Go_To_Row_Col (row,col);
	Display_Str (str);
}
  c6:	92 b3       	in	r25, 0x12	; 18
  c8:	9f 7d       	andi	r25, 0xDF	; 223
  ca:	92 bb       	out	0x12, r25	; 18
  cc:	92 b3       	in	r25, 0x12	; 18
  ce:	9f 7b       	andi	r25, 0xBF	; 191
  d0:	92 bb       	out	0x12, r25	; 18
  d2:	e9 ef       	ldi	r30, 0xF9	; 249
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <Send_CMD+0x10>
  da:	00 c0       	rjmp	.+0      	; 0xdc <Send_CMD+0x16>
  dc:	00 00       	nop
  de:	92 b3       	in	r25, 0x12	; 18
  e0:	90 68       	ori	r25, 0x80	; 128
  e2:	92 bb       	out	0x12, r25	; 18
  e4:	e9 ef       	ldi	r30, 0xF9	; 249
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <Send_CMD+0x22>
  ec:	00 c0       	rjmp	.+0      	; 0xee <Send_CMD+0x28>
  ee:	00 00       	nop
  f0:	88 bb       	out	0x18, r24	; 24
  f2:	89 ef       	ldi	r24, 0xF9	; 249
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <Send_CMD+0x30>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <Send_CMD+0x36>
  fc:	00 00       	nop
  fe:	82 b3       	in	r24, 0x12	; 18
 100:	8f 77       	andi	r24, 0x7F	; 127
 102:	82 bb       	out	0x12, r24	; 18
 104:	08 95       	ret

00000106 <LCD_Init>:
 106:	87 b3       	in	r24, 0x17	; 23
 108:	6f ef       	ldi	r22, 0xFF	; 255
 10a:	0e 94 53 00 	call	0xa6	; 0xa6 <Set_GroupDir>
 10e:	80 ee       	ldi	r24, 0xE0	; 224
 110:	81 bb       	out	0x11, r24	; 17
 112:	83 ed       	ldi	r24, 0xD3	; 211
 114:	90 e3       	ldi	r25, 0x30	; 48
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_Init+0x10>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LCD_Init+0x16>
 11c:	00 00       	nop
 11e:	88 e3       	ldi	r24, 0x38	; 56
 120:	0e 94 63 00 	call	0xc6	; 0xc6 <Send_CMD>
 124:	89 ef       	ldi	r24, 0xF9	; 249
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_Init+0x22>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCD_Init+0x28>
 12e:	00 00       	nop
 130:	8c e0       	ldi	r24, 0x0C	; 12
 132:	0e 94 63 00 	call	0xc6	; 0xc6 <Send_CMD>
 136:	89 ef       	ldi	r24, 0xF9	; 249
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_Init+0x34>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCD_Init+0x3a>
 140:	00 00       	nop
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	0e 94 63 00 	call	0xc6	; 0xc6 <Send_CMD>
 148:	83 ef       	ldi	r24, 0xF3	; 243
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCD_Init+0x46>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCD_Init+0x4c>
 152:	00 00       	nop
 154:	08 95       	ret

00000156 <Send_DATA>:
 156:	92 b3       	in	r25, 0x12	; 18
 158:	90 62       	ori	r25, 0x20	; 32
 15a:	92 bb       	out	0x12, r25	; 18
 15c:	92 b3       	in	r25, 0x12	; 18
 15e:	9f 7b       	andi	r25, 0xBF	; 191
 160:	92 bb       	out	0x12, r25	; 18
 162:	e9 ef       	ldi	r30, 0xF9	; 249
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <Send_DATA+0x10>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <Send_DATA+0x16>
 16c:	00 00       	nop
 16e:	92 b3       	in	r25, 0x12	; 18
 170:	90 68       	ori	r25, 0x80	; 128
 172:	92 bb       	out	0x12, r25	; 18
 174:	e9 ef       	ldi	r30, 0xF9	; 249
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <Send_DATA+0x22>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <Send_DATA+0x28>
 17e:	00 00       	nop
 180:	88 bb       	out	0x18, r24	; 24
 182:	89 ef       	ldi	r24, 0xF9	; 249
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <Send_DATA+0x30>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <Send_DATA+0x36>
 18c:	00 00       	nop
 18e:	82 b3       	in	r24, 0x12	; 18
 190:	8f 77       	andi	r24, 0x7F	; 127
 192:	82 bb       	out	0x12, r24	; 18
 194:	08 95       	ret

00000196 <Display_Str>:
 196:	0f 93       	push	r16
 198:	1f 93       	push	r17
 19a:	cf 93       	push	r28
 19c:	8c 01       	movw	r16, r24
 19e:	c0 e0       	ldi	r28, 0x00	; 0
 1a0:	03 c0       	rjmp	.+6      	; 0x1a8 <Display_Str+0x12>
 1a2:	0e 94 ab 00 	call	0x156	; 0x156 <Send_DATA>
 1a6:	cf 5f       	subi	r28, 0xFF	; 255
 1a8:	f8 01       	movw	r30, r16
 1aa:	ec 0f       	add	r30, r28
 1ac:	f1 1d       	adc	r31, r1
 1ae:	80 81       	ld	r24, Z
 1b0:	81 11       	cpse	r24, r1
 1b2:	f7 cf       	rjmp	.-18     	; 0x1a2 <Display_Str+0xc>
 1b4:	cf 91       	pop	r28
 1b6:	1f 91       	pop	r17
 1b8:	0f 91       	pop	r16
 1ba:	08 95       	ret

000001bc <Go_To_Row_Col>:
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	31 f0       	breq	.+12     	; 0x1cc <Go_To_Row_Col+0x10>
 1c0:	70 f0       	brcs	.+28     	; 0x1de <Go_To_Row_Col+0x22>
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	31 f0       	breq	.+12     	; 0x1d2 <Go_To_Row_Col+0x16>
 1c6:	83 30       	cpi	r24, 0x03	; 3
 1c8:	39 f0       	breq	.+14     	; 0x1d8 <Go_To_Row_Col+0x1c>
 1ca:	0a c0       	rjmp	.+20     	; 0x1e0 <Go_To_Row_Col+0x24>
 1cc:	90 e4       	ldi	r25, 0x40	; 64
 1ce:	96 0f       	add	r25, r22
 1d0:	07 c0       	rjmp	.+14     	; 0x1e0 <Go_To_Row_Col+0x24>
 1d2:	90 e1       	ldi	r25, 0x10	; 16
 1d4:	96 0f       	add	r25, r22
 1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <Go_To_Row_Col+0x24>
 1d8:	90 e5       	ldi	r25, 0x50	; 80
 1da:	96 0f       	add	r25, r22
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <Go_To_Row_Col+0x24>
 1de:	96 2f       	mov	r25, r22
 1e0:	89 2f       	mov	r24, r25
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	0e 94 63 00 	call	0xc6	; 0xc6 <Send_CMD>
 1e8:	08 95       	ret

000001ea <Integer_TO_String>:

void Integer_TO_String (u8 value)	                        // Display certain integer value on screen
{
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	6e 97       	sbiw	r28, 0x1e	; 30
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	f8 94       	cli
 1f8:	de bf       	out	0x3e, r29	; 62
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	cd bf       	out	0x3d, r28	; 61
	u8 number_str[30];
	itoa (value, number_str, 10);
 1fe:	4a e0       	ldi	r20, 0x0A	; 10
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	be 01       	movw	r22, r28
 204:	6f 5f       	subi	r22, 0xFF	; 255
 206:	7f 4f       	sbci	r23, 0xFF	; 255
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 20 03 	call	0x640	; 0x640 <itoa>
	Display_Str (number_str);
 20e:	ce 01       	movw	r24, r28
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	0e 94 cb 00 	call	0x196	; 0x196 <Display_Str>
}
 216:	6e 96       	adiw	r28, 0x1e	; 30
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	f8 94       	cli
 21c:	de bf       	out	0x3e, r29	; 62
 21e:	0f be       	out	0x3f, r0	; 63
 220:	cd bf       	out	0x3d, r28	; 61
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <main>:
	u16 adc_value;
	u8 Temperature;
	u16 ADC_Reading;
	u16 mv_Value;
	u16 LDR_Value;
	ADC_Init();
 228:	0e 94 41 00 	call	0x82	; 0x82 <ADC_Init>
	USART_Init();
 22c:	0e 94 76 01 	call	0x2ec	; 0x2ec <USART_Init>
	LCD_Init();
 230:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Init>
	
	SET_BIT(SREG,7);	                           //Enable I-Bit
 234:	8f b7       	in	r24, 0x3f	; 63
 236:	80 68       	ori	r24, 0x80	; 128
 238:	8f bf       	out	0x3f, r24	; 63
	while (1)
	{

		

		adc_value = ADC_readChannel(1);		        // read adc value at PA0
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	0e 94 46 00 	call	0x8c	; 0x8c <ADC_readChannel>
		Temperature = adc_value / 2.01;   	        // finding the temperature
 240:	bc 01       	movw	r22, r24
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 25 02 	call	0x44a	; 0x44a <__floatunsisf>
 24a:	27 ed       	ldi	r18, 0xD7	; 215
 24c:	33 ea       	ldi	r19, 0xA3	; 163
 24e:	40 e0       	ldi	r20, 0x00	; 0
 250:	50 e4       	ldi	r21, 0x40	; 64
 252:	0e 94 84 01 	call	0x308	; 0x308 <__divsf3>
 256:	0e 94 f6 01 	call	0x3ec	; 0x3ec <__fixunssfsi>
 25a:	c6 2f       	mov	r28, r22
		Go_To_Row_Col(0,1);
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	0e 94 de 00 	call	0x1bc	; 0x1bc <Go_To_Row_Col>
		Display_Str("The Temp is:  ");   			//Display temperature
 264:	80 e6       	ldi	r24, 0x60	; 96
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 cb 00 	call	0x196	; 0x196 <Display_Str>
		Go_To_Row_Col(1,5);
 26c:	65 e0       	ldi	r22, 0x05	; 5
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 de 00 	call	0x1bc	; 0x1bc <Go_To_Row_Col>
		Integer_TO_String(Temperature);
 274:	8c 2f       	mov	r24, r28
 276:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Integer_TO_String>
		Display_Str(" C     ");
 27a:	8f e6       	ldi	r24, 0x6F	; 111
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 cb 00 	call	0x196	; 0x196 <Display_Str>

		if(Temperature > 28)
 282:	cd 31       	cpi	r28, 0x1D	; 29
 284:	20 f0       	brcs	.+8      	; 0x28e <main+0x66>
		{
			USART_sendByte('H');	                // Alarm On
 286:	88 e4       	ldi	r24, 0x48	; 72
 288:	0e 94 80 01 	call	0x300	; 0x300 <USART_sendByte>
 28c:	09 c0       	rjmp	.+18     	; 0x2a0 <main+0x78>
		}
		else if(Temperature > 21)
 28e:	c6 31       	cpi	r28, 0x16	; 22
 290:	20 f0       	brcs	.+8      	; 0x29a <main+0x72>
		{
			USART_sendByte('F');	                // Fan On
 292:	86 e4       	ldi	r24, 0x46	; 70
 294:	0e 94 80 01 	call	0x300	; 0x300 <USART_sendByte>
 298:	03 c0       	rjmp	.+6      	; 0x2a0 <main+0x78>
		}
		else
		{
			USART_sendByte('X');
 29a:	88 e5       	ldi	r24, 0x58	; 88
 29c:	0e 94 80 01 	call	0x300	; 0x300 <USART_sendByte>
		}

		// LDR Code
		
		ADC_Reading = ADC_readChannel(0);
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	0e 94 46 00 	call	0x8c	; 0x8c <ADC_readChannel>
		mv_Value=(ADC_Reading * 5000)/256;
 2a6:	28 e8       	ldi	r18, 0x88	; 136
 2a8:	33 e1       	ldi	r19, 0x13	; 19
 2aa:	ac 01       	movw	r20, r24
 2ac:	42 9f       	mul	r20, r18
 2ae:	c0 01       	movw	r24, r0
 2b0:	43 9f       	mul	r20, r19
 2b2:	90 0d       	add	r25, r0
 2b4:	52 9f       	mul	r21, r18
 2b6:	90 0d       	add	r25, r0
 2b8:	11 24       	eor	r1, r1
 2ba:	69 2f       	mov	r22, r25
 2bc:	77 27       	eor	r23, r23
		LDR_Value = mv_Value * 3.8;
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 25 02 	call	0x44a	; 0x44a <__floatunsisf>
 2c6:	23 e3       	ldi	r18, 0x33	; 51
 2c8:	33 e3       	ldi	r19, 0x33	; 51
 2ca:	43 e7       	ldi	r20, 0x73	; 115
 2cc:	50 e4       	ldi	r21, 0x40	; 64
 2ce:	0e 94 b3 02 	call	0x566	; 0x566 <__mulsf3>
 2d2:	0e 94 f6 01 	call	0x3ec	; 0x3ec <__fixunssfsi>

		if(LDR_Value < 400)
 2d6:	60 39       	cpi	r22, 0x90	; 144
 2d8:	71 40       	sbci	r23, 0x01	; 1
 2da:	20 f4       	brcc	.+8      	; 0x2e4 <main+0xbc>
		{
			USART_sendByte('L');	             // Led On
 2dc:	8c e4       	ldi	r24, 0x4C	; 76
 2de:	0e 94 80 01 	call	0x300	; 0x300 <USART_sendByte>
 2e2:	ab cf       	rjmp	.-170    	; 0x23a <main+0x12>
		}
		else
		{
			USART_sendByte('X');
 2e4:	88 e5       	ldi	r24, 0x58	; 88
 2e6:	0e 94 80 01 	call	0x300	; 0x300 <USART_sendByte>
 2ea:	a7 cf       	rjmp	.-178    	; 0x23a <main+0x12>

000002ec <USART_Init>:

void USART_Init (void)					// Function to initialize the UART
{
	// Enable Double speed mode

	UCSRA = (1<<U2X);
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	8b b9       	out	0x0b, r24	; 11
	 * Disable for UDR empty register interrupt
	 * RXB8 & TXB not Used
	 * Enable receiver (RXEN = 1)
	 * Enable Transmitter (TXEN = 1)
	 */
	UCSRB = (1<<RXEN) | (1<<TXEN);
 2f0:	88 e1       	ldi	r24, 0x18	; 24
 2f2:	8a b9       	out	0x0a, r24	; 10
	 * USBS = 0 for 1 stop bit
	 * UCSZ1:0 = 1 (8-Bit data length)
	 * UCPOL = 0  (Used with Synchronous mode Only)
	 */

	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
 2f4:	86 e8       	ldi	r24, 0x86	; 134
 2f6:	80 bd       	out	0x20, r24	; 32

	// Set value of UBRR register with defined baudrate (9600)
	
	UBRRH = BAUD_PRESCALE >> 8;
 2f8:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;
 2fa:	8c e0       	ldi	r24, 0x0C	; 12
 2fc:	89 b9       	out	0x09, r24	; 9
 2fe:	08 95       	ret

00000300 <USART_sendByte>:

}

void USART_sendByte (u8 data)			// Function to send data byte
{
	while (BIT_IS_CLEAR(UCSRA,UDRE));	// Polling until UDR register is empty and ready to take data
 300:	5d 9b       	sbis	0x0b, 5	; 11
 302:	fe cf       	rjmp	.-4      	; 0x300 <USART_sendByte>
	UDR = data;						    // Set data to UDR register
 304:	8c b9       	out	0x0c, r24	; 12
 306:	08 95       	ret

00000308 <__divsf3>:
 308:	0e 94 98 01 	call	0x330	; 0x330 <__divsf3x>
 30c:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__fp_round>
 310:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__fp_pscB>
 314:	58 f0       	brcs	.+22     	; 0x32c <__divsf3+0x24>
 316:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__fp_pscA>
 31a:	40 f0       	brcs	.+16     	; 0x32c <__divsf3+0x24>
 31c:	29 f4       	brne	.+10     	; 0x328 <__divsf3+0x20>
 31e:	5f 3f       	cpi	r21, 0xFF	; 255
 320:	29 f0       	breq	.+10     	; 0x32c <__divsf3+0x24>
 322:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__fp_inf>
 326:	51 11       	cpse	r21, r1
 328:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__fp_szero>
 32c:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__fp_nan>

00000330 <__divsf3x>:
 330:	0e 94 8a 02 	call	0x514	; 0x514 <__fp_split3>
 334:	68 f3       	brcs	.-38     	; 0x310 <__divsf3+0x8>

00000336 <__divsf3_pse>:
 336:	99 23       	and	r25, r25
 338:	b1 f3       	breq	.-20     	; 0x326 <__divsf3+0x1e>
 33a:	55 23       	and	r21, r21
 33c:	91 f3       	breq	.-28     	; 0x322 <__divsf3+0x1a>
 33e:	95 1b       	sub	r25, r21
 340:	55 0b       	sbc	r21, r21
 342:	bb 27       	eor	r27, r27
 344:	aa 27       	eor	r26, r26
 346:	62 17       	cp	r22, r18
 348:	73 07       	cpc	r23, r19
 34a:	84 07       	cpc	r24, r20
 34c:	38 f0       	brcs	.+14     	; 0x35c <__divsf3_pse+0x26>
 34e:	9f 5f       	subi	r25, 0xFF	; 255
 350:	5f 4f       	sbci	r21, 0xFF	; 255
 352:	22 0f       	add	r18, r18
 354:	33 1f       	adc	r19, r19
 356:	44 1f       	adc	r20, r20
 358:	aa 1f       	adc	r26, r26
 35a:	a9 f3       	breq	.-22     	; 0x346 <__divsf3_pse+0x10>
 35c:	35 d0       	rcall	.+106    	; 0x3c8 <__divsf3_pse+0x92>
 35e:	0e 2e       	mov	r0, r30
 360:	3a f0       	brmi	.+14     	; 0x370 <__divsf3_pse+0x3a>
 362:	e0 e8       	ldi	r30, 0x80	; 128
 364:	32 d0       	rcall	.+100    	; 0x3ca <__divsf3_pse+0x94>
 366:	91 50       	subi	r25, 0x01	; 1
 368:	50 40       	sbci	r21, 0x00	; 0
 36a:	e6 95       	lsr	r30
 36c:	00 1c       	adc	r0, r0
 36e:	ca f7       	brpl	.-14     	; 0x362 <__divsf3_pse+0x2c>
 370:	2b d0       	rcall	.+86     	; 0x3c8 <__divsf3_pse+0x92>
 372:	fe 2f       	mov	r31, r30
 374:	29 d0       	rcall	.+82     	; 0x3c8 <__divsf3_pse+0x92>
 376:	66 0f       	add	r22, r22
 378:	77 1f       	adc	r23, r23
 37a:	88 1f       	adc	r24, r24
 37c:	bb 1f       	adc	r27, r27
 37e:	26 17       	cp	r18, r22
 380:	37 07       	cpc	r19, r23
 382:	48 07       	cpc	r20, r24
 384:	ab 07       	cpc	r26, r27
 386:	b0 e8       	ldi	r27, 0x80	; 128
 388:	09 f0       	breq	.+2      	; 0x38c <__divsf3_pse+0x56>
 38a:	bb 0b       	sbc	r27, r27
 38c:	80 2d       	mov	r24, r0
 38e:	bf 01       	movw	r22, r30
 390:	ff 27       	eor	r31, r31
 392:	93 58       	subi	r25, 0x83	; 131
 394:	5f 4f       	sbci	r21, 0xFF	; 255
 396:	3a f0       	brmi	.+14     	; 0x3a6 <__divsf3_pse+0x70>
 398:	9e 3f       	cpi	r25, 0xFE	; 254
 39a:	51 05       	cpc	r21, r1
 39c:	78 f0       	brcs	.+30     	; 0x3bc <__divsf3_pse+0x86>
 39e:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__fp_inf>
 3a2:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__fp_szero>
 3a6:	5f 3f       	cpi	r21, 0xFF	; 255
 3a8:	e4 f3       	brlt	.-8      	; 0x3a2 <__divsf3_pse+0x6c>
 3aa:	98 3e       	cpi	r25, 0xE8	; 232
 3ac:	d4 f3       	brlt	.-12     	; 0x3a2 <__divsf3_pse+0x6c>
 3ae:	86 95       	lsr	r24
 3b0:	77 95       	ror	r23
 3b2:	67 95       	ror	r22
 3b4:	b7 95       	ror	r27
 3b6:	f7 95       	ror	r31
 3b8:	9f 5f       	subi	r25, 0xFF	; 255
 3ba:	c9 f7       	brne	.-14     	; 0x3ae <__divsf3_pse+0x78>
 3bc:	88 0f       	add	r24, r24
 3be:	91 1d       	adc	r25, r1
 3c0:	96 95       	lsr	r25
 3c2:	87 95       	ror	r24
 3c4:	97 f9       	bld	r25, 7
 3c6:	08 95       	ret
 3c8:	e1 e0       	ldi	r30, 0x01	; 1
 3ca:	66 0f       	add	r22, r22
 3cc:	77 1f       	adc	r23, r23
 3ce:	88 1f       	adc	r24, r24
 3d0:	bb 1f       	adc	r27, r27
 3d2:	62 17       	cp	r22, r18
 3d4:	73 07       	cpc	r23, r19
 3d6:	84 07       	cpc	r24, r20
 3d8:	ba 07       	cpc	r27, r26
 3da:	20 f0       	brcs	.+8      	; 0x3e4 <__divsf3_pse+0xae>
 3dc:	62 1b       	sub	r22, r18
 3de:	73 0b       	sbc	r23, r19
 3e0:	84 0b       	sbc	r24, r20
 3e2:	ba 0b       	sbc	r27, r26
 3e4:	ee 1f       	adc	r30, r30
 3e6:	88 f7       	brcc	.-30     	; 0x3ca <__divsf3_pse+0x94>
 3e8:	e0 95       	com	r30
 3ea:	08 95       	ret

000003ec <__fixunssfsi>:
 3ec:	0e 94 92 02 	call	0x524	; 0x524 <__fp_splitA>
 3f0:	88 f0       	brcs	.+34     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3f2:	9f 57       	subi	r25, 0x7F	; 127
 3f4:	98 f0       	brcs	.+38     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3f6:	b9 2f       	mov	r27, r25
 3f8:	99 27       	eor	r25, r25
 3fa:	b7 51       	subi	r27, 0x17	; 23
 3fc:	b0 f0       	brcs	.+44     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 3fe:	e1 f0       	breq	.+56     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 400:	66 0f       	add	r22, r22
 402:	77 1f       	adc	r23, r23
 404:	88 1f       	adc	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	1a f0       	brmi	.+6      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40a:	ba 95       	dec	r27
 40c:	c9 f7       	brne	.-14     	; 0x400 <__EEPROM_REGION_LENGTH__>
 40e:	14 c0       	rjmp	.+40     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 410:	b1 30       	cpi	r27, 0x01	; 1
 412:	91 f0       	breq	.+36     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 414:	0e 94 ac 02 	call	0x558	; 0x558 <__fp_zero>
 418:	b1 e0       	ldi	r27, 0x01	; 1
 41a:	08 95       	ret
 41c:	0c 94 ac 02 	jmp	0x558	; 0x558 <__fp_zero>
 420:	67 2f       	mov	r22, r23
 422:	78 2f       	mov	r23, r24
 424:	88 27       	eor	r24, r24
 426:	b8 5f       	subi	r27, 0xF8	; 248
 428:	39 f0       	breq	.+14     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 42a:	b9 3f       	cpi	r27, 0xF9	; 249
 42c:	cc f3       	brlt	.-14     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 42e:	86 95       	lsr	r24
 430:	77 95       	ror	r23
 432:	67 95       	ror	r22
 434:	b3 95       	inc	r27
 436:	d9 f7       	brne	.-10     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 438:	3e f4       	brtc	.+14     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 43a:	90 95       	com	r25
 43c:	80 95       	com	r24
 43e:	70 95       	com	r23
 440:	61 95       	neg	r22
 442:	7f 4f       	sbci	r23, 0xFF	; 255
 444:	8f 4f       	sbci	r24, 0xFF	; 255
 446:	9f 4f       	sbci	r25, 0xFF	; 255
 448:	08 95       	ret

0000044a <__floatunsisf>:
 44a:	e8 94       	clt
 44c:	09 c0       	rjmp	.+18     	; 0x460 <__floatsisf+0x12>

0000044e <__floatsisf>:
 44e:	97 fb       	bst	r25, 7
 450:	3e f4       	brtc	.+14     	; 0x460 <__floatsisf+0x12>
 452:	90 95       	com	r25
 454:	80 95       	com	r24
 456:	70 95       	com	r23
 458:	61 95       	neg	r22
 45a:	7f 4f       	sbci	r23, 0xFF	; 255
 45c:	8f 4f       	sbci	r24, 0xFF	; 255
 45e:	9f 4f       	sbci	r25, 0xFF	; 255
 460:	99 23       	and	r25, r25
 462:	a9 f0       	breq	.+42     	; 0x48e <__floatsisf+0x40>
 464:	f9 2f       	mov	r31, r25
 466:	96 e9       	ldi	r25, 0x96	; 150
 468:	bb 27       	eor	r27, r27
 46a:	93 95       	inc	r25
 46c:	f6 95       	lsr	r31
 46e:	87 95       	ror	r24
 470:	77 95       	ror	r23
 472:	67 95       	ror	r22
 474:	b7 95       	ror	r27
 476:	f1 11       	cpse	r31, r1
 478:	f8 cf       	rjmp	.-16     	; 0x46a <__floatsisf+0x1c>
 47a:	fa f4       	brpl	.+62     	; 0x4ba <__floatsisf+0x6c>
 47c:	bb 0f       	add	r27, r27
 47e:	11 f4       	brne	.+4      	; 0x484 <__floatsisf+0x36>
 480:	60 ff       	sbrs	r22, 0
 482:	1b c0       	rjmp	.+54     	; 0x4ba <__floatsisf+0x6c>
 484:	6f 5f       	subi	r22, 0xFF	; 255
 486:	7f 4f       	sbci	r23, 0xFF	; 255
 488:	8f 4f       	sbci	r24, 0xFF	; 255
 48a:	9f 4f       	sbci	r25, 0xFF	; 255
 48c:	16 c0       	rjmp	.+44     	; 0x4ba <__floatsisf+0x6c>
 48e:	88 23       	and	r24, r24
 490:	11 f0       	breq	.+4      	; 0x496 <__floatsisf+0x48>
 492:	96 e9       	ldi	r25, 0x96	; 150
 494:	11 c0       	rjmp	.+34     	; 0x4b8 <__floatsisf+0x6a>
 496:	77 23       	and	r23, r23
 498:	21 f0       	breq	.+8      	; 0x4a2 <__floatsisf+0x54>
 49a:	9e e8       	ldi	r25, 0x8E	; 142
 49c:	87 2f       	mov	r24, r23
 49e:	76 2f       	mov	r23, r22
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <__floatsisf+0x5e>
 4a2:	66 23       	and	r22, r22
 4a4:	71 f0       	breq	.+28     	; 0x4c2 <__floatsisf+0x74>
 4a6:	96 e8       	ldi	r25, 0x86	; 134
 4a8:	86 2f       	mov	r24, r22
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	2a f0       	brmi	.+10     	; 0x4ba <__floatsisf+0x6c>
 4b0:	9a 95       	dec	r25
 4b2:	66 0f       	add	r22, r22
 4b4:	77 1f       	adc	r23, r23
 4b6:	88 1f       	adc	r24, r24
 4b8:	da f7       	brpl	.-10     	; 0x4b0 <__floatsisf+0x62>
 4ba:	88 0f       	add	r24, r24
 4bc:	96 95       	lsr	r25
 4be:	87 95       	ror	r24
 4c0:	97 f9       	bld	r25, 7
 4c2:	08 95       	ret

000004c4 <__fp_inf>:
 4c4:	97 f9       	bld	r25, 7
 4c6:	9f 67       	ori	r25, 0x7F	; 127
 4c8:	80 e8       	ldi	r24, 0x80	; 128
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	08 95       	ret

000004d0 <__fp_nan>:
 4d0:	9f ef       	ldi	r25, 0xFF	; 255
 4d2:	80 ec       	ldi	r24, 0xC0	; 192
 4d4:	08 95       	ret

000004d6 <__fp_pscA>:
 4d6:	00 24       	eor	r0, r0
 4d8:	0a 94       	dec	r0
 4da:	16 16       	cp	r1, r22
 4dc:	17 06       	cpc	r1, r23
 4de:	18 06       	cpc	r1, r24
 4e0:	09 06       	cpc	r0, r25
 4e2:	08 95       	ret

000004e4 <__fp_pscB>:
 4e4:	00 24       	eor	r0, r0
 4e6:	0a 94       	dec	r0
 4e8:	12 16       	cp	r1, r18
 4ea:	13 06       	cpc	r1, r19
 4ec:	14 06       	cpc	r1, r20
 4ee:	05 06       	cpc	r0, r21
 4f0:	08 95       	ret

000004f2 <__fp_round>:
 4f2:	09 2e       	mov	r0, r25
 4f4:	03 94       	inc	r0
 4f6:	00 0c       	add	r0, r0
 4f8:	11 f4       	brne	.+4      	; 0x4fe <__fp_round+0xc>
 4fa:	88 23       	and	r24, r24
 4fc:	52 f0       	brmi	.+20     	; 0x512 <__fp_round+0x20>
 4fe:	bb 0f       	add	r27, r27
 500:	40 f4       	brcc	.+16     	; 0x512 <__fp_round+0x20>
 502:	bf 2b       	or	r27, r31
 504:	11 f4       	brne	.+4      	; 0x50a <__fp_round+0x18>
 506:	60 ff       	sbrs	r22, 0
 508:	04 c0       	rjmp	.+8      	; 0x512 <__fp_round+0x20>
 50a:	6f 5f       	subi	r22, 0xFF	; 255
 50c:	7f 4f       	sbci	r23, 0xFF	; 255
 50e:	8f 4f       	sbci	r24, 0xFF	; 255
 510:	9f 4f       	sbci	r25, 0xFF	; 255
 512:	08 95       	ret

00000514 <__fp_split3>:
 514:	57 fd       	sbrc	r21, 7
 516:	90 58       	subi	r25, 0x80	; 128
 518:	44 0f       	add	r20, r20
 51a:	55 1f       	adc	r21, r21
 51c:	59 f0       	breq	.+22     	; 0x534 <__fp_splitA+0x10>
 51e:	5f 3f       	cpi	r21, 0xFF	; 255
 520:	71 f0       	breq	.+28     	; 0x53e <__fp_splitA+0x1a>
 522:	47 95       	ror	r20

00000524 <__fp_splitA>:
 524:	88 0f       	add	r24, r24
 526:	97 fb       	bst	r25, 7
 528:	99 1f       	adc	r25, r25
 52a:	61 f0       	breq	.+24     	; 0x544 <__fp_splitA+0x20>
 52c:	9f 3f       	cpi	r25, 0xFF	; 255
 52e:	79 f0       	breq	.+30     	; 0x54e <__fp_splitA+0x2a>
 530:	87 95       	ror	r24
 532:	08 95       	ret
 534:	12 16       	cp	r1, r18
 536:	13 06       	cpc	r1, r19
 538:	14 06       	cpc	r1, r20
 53a:	55 1f       	adc	r21, r21
 53c:	f2 cf       	rjmp	.-28     	; 0x522 <__fp_split3+0xe>
 53e:	46 95       	lsr	r20
 540:	f1 df       	rcall	.-30     	; 0x524 <__fp_splitA>
 542:	08 c0       	rjmp	.+16     	; 0x554 <__fp_splitA+0x30>
 544:	16 16       	cp	r1, r22
 546:	17 06       	cpc	r1, r23
 548:	18 06       	cpc	r1, r24
 54a:	99 1f       	adc	r25, r25
 54c:	f1 cf       	rjmp	.-30     	; 0x530 <__fp_splitA+0xc>
 54e:	86 95       	lsr	r24
 550:	71 05       	cpc	r23, r1
 552:	61 05       	cpc	r22, r1
 554:	08 94       	sec
 556:	08 95       	ret

00000558 <__fp_zero>:
 558:	e8 94       	clt

0000055a <__fp_szero>:
 55a:	bb 27       	eor	r27, r27
 55c:	66 27       	eor	r22, r22
 55e:	77 27       	eor	r23, r23
 560:	cb 01       	movw	r24, r22
 562:	97 f9       	bld	r25, 7
 564:	08 95       	ret

00000566 <__mulsf3>:
 566:	0e 94 c6 02 	call	0x58c	; 0x58c <__mulsf3x>
 56a:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__fp_round>
 56e:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__fp_pscA>
 572:	38 f0       	brcs	.+14     	; 0x582 <__mulsf3+0x1c>
 574:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__fp_pscB>
 578:	20 f0       	brcs	.+8      	; 0x582 <__mulsf3+0x1c>
 57a:	95 23       	and	r25, r21
 57c:	11 f0       	breq	.+4      	; 0x582 <__mulsf3+0x1c>
 57e:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__fp_inf>
 582:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__fp_nan>
 586:	11 24       	eor	r1, r1
 588:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__fp_szero>

0000058c <__mulsf3x>:
 58c:	0e 94 8a 02 	call	0x514	; 0x514 <__fp_split3>
 590:	70 f3       	brcs	.-36     	; 0x56e <__mulsf3+0x8>

00000592 <__mulsf3_pse>:
 592:	95 9f       	mul	r25, r21
 594:	c1 f3       	breq	.-16     	; 0x586 <__mulsf3+0x20>
 596:	95 0f       	add	r25, r21
 598:	50 e0       	ldi	r21, 0x00	; 0
 59a:	55 1f       	adc	r21, r21
 59c:	62 9f       	mul	r22, r18
 59e:	f0 01       	movw	r30, r0
 5a0:	72 9f       	mul	r23, r18
 5a2:	bb 27       	eor	r27, r27
 5a4:	f0 0d       	add	r31, r0
 5a6:	b1 1d       	adc	r27, r1
 5a8:	63 9f       	mul	r22, r19
 5aa:	aa 27       	eor	r26, r26
 5ac:	f0 0d       	add	r31, r0
 5ae:	b1 1d       	adc	r27, r1
 5b0:	aa 1f       	adc	r26, r26
 5b2:	64 9f       	mul	r22, r20
 5b4:	66 27       	eor	r22, r22
 5b6:	b0 0d       	add	r27, r0
 5b8:	a1 1d       	adc	r26, r1
 5ba:	66 1f       	adc	r22, r22
 5bc:	82 9f       	mul	r24, r18
 5be:	22 27       	eor	r18, r18
 5c0:	b0 0d       	add	r27, r0
 5c2:	a1 1d       	adc	r26, r1
 5c4:	62 1f       	adc	r22, r18
 5c6:	73 9f       	mul	r23, r19
 5c8:	b0 0d       	add	r27, r0
 5ca:	a1 1d       	adc	r26, r1
 5cc:	62 1f       	adc	r22, r18
 5ce:	83 9f       	mul	r24, r19
 5d0:	a0 0d       	add	r26, r0
 5d2:	61 1d       	adc	r22, r1
 5d4:	22 1f       	adc	r18, r18
 5d6:	74 9f       	mul	r23, r20
 5d8:	33 27       	eor	r19, r19
 5da:	a0 0d       	add	r26, r0
 5dc:	61 1d       	adc	r22, r1
 5de:	23 1f       	adc	r18, r19
 5e0:	84 9f       	mul	r24, r20
 5e2:	60 0d       	add	r22, r0
 5e4:	21 1d       	adc	r18, r1
 5e6:	82 2f       	mov	r24, r18
 5e8:	76 2f       	mov	r23, r22
 5ea:	6a 2f       	mov	r22, r26
 5ec:	11 24       	eor	r1, r1
 5ee:	9f 57       	subi	r25, 0x7F	; 127
 5f0:	50 40       	sbci	r21, 0x00	; 0
 5f2:	9a f0       	brmi	.+38     	; 0x61a <__mulsf3_pse+0x88>
 5f4:	f1 f0       	breq	.+60     	; 0x632 <__mulsf3_pse+0xa0>
 5f6:	88 23       	and	r24, r24
 5f8:	4a f0       	brmi	.+18     	; 0x60c <__mulsf3_pse+0x7a>
 5fa:	ee 0f       	add	r30, r30
 5fc:	ff 1f       	adc	r31, r31
 5fe:	bb 1f       	adc	r27, r27
 600:	66 1f       	adc	r22, r22
 602:	77 1f       	adc	r23, r23
 604:	88 1f       	adc	r24, r24
 606:	91 50       	subi	r25, 0x01	; 1
 608:	50 40       	sbci	r21, 0x00	; 0
 60a:	a9 f7       	brne	.-22     	; 0x5f6 <__mulsf3_pse+0x64>
 60c:	9e 3f       	cpi	r25, 0xFE	; 254
 60e:	51 05       	cpc	r21, r1
 610:	80 f0       	brcs	.+32     	; 0x632 <__mulsf3_pse+0xa0>
 612:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__fp_inf>
 616:	0c 94 ad 02 	jmp	0x55a	; 0x55a <__fp_szero>
 61a:	5f 3f       	cpi	r21, 0xFF	; 255
 61c:	e4 f3       	brlt	.-8      	; 0x616 <__mulsf3_pse+0x84>
 61e:	98 3e       	cpi	r25, 0xE8	; 232
 620:	d4 f3       	brlt	.-12     	; 0x616 <__mulsf3_pse+0x84>
 622:	86 95       	lsr	r24
 624:	77 95       	ror	r23
 626:	67 95       	ror	r22
 628:	b7 95       	ror	r27
 62a:	f7 95       	ror	r31
 62c:	e7 95       	ror	r30
 62e:	9f 5f       	subi	r25, 0xFF	; 255
 630:	c1 f7       	brne	.-16     	; 0x622 <__mulsf3_pse+0x90>
 632:	fe 2b       	or	r31, r30
 634:	88 0f       	add	r24, r24
 636:	91 1d       	adc	r25, r1
 638:	96 95       	lsr	r25
 63a:	87 95       	ror	r24
 63c:	97 f9       	bld	r25, 7
 63e:	08 95       	ret

00000640 <itoa>:
 640:	45 32       	cpi	r20, 0x25	; 37
 642:	51 05       	cpc	r21, r1
 644:	20 f4       	brcc	.+8      	; 0x64e <itoa+0xe>
 646:	42 30       	cpi	r20, 0x02	; 2
 648:	10 f0       	brcs	.+4      	; 0x64e <itoa+0xe>
 64a:	0c 94 2b 03 	jmp	0x656	; 0x656 <__itoa_ncheck>
 64e:	fb 01       	movw	r30, r22
 650:	10 82       	st	Z, r1
 652:	cb 01       	movw	r24, r22
 654:	08 95       	ret

00000656 <__itoa_ncheck>:
 656:	bb 27       	eor	r27, r27
 658:	4a 30       	cpi	r20, 0x0A	; 10
 65a:	31 f4       	brne	.+12     	; 0x668 <__itoa_ncheck+0x12>
 65c:	99 23       	and	r25, r25
 65e:	22 f4       	brpl	.+8      	; 0x668 <__itoa_ncheck+0x12>
 660:	bd e2       	ldi	r27, 0x2D	; 45
 662:	90 95       	com	r25
 664:	81 95       	neg	r24
 666:	9f 4f       	sbci	r25, 0xFF	; 255
 668:	0c 94 37 03 	jmp	0x66e	; 0x66e <__utoa_common>

0000066c <__utoa_ncheck>:
 66c:	bb 27       	eor	r27, r27

0000066e <__utoa_common>:
 66e:	fb 01       	movw	r30, r22
 670:	55 27       	eor	r21, r21
 672:	aa 27       	eor	r26, r26
 674:	88 0f       	add	r24, r24
 676:	99 1f       	adc	r25, r25
 678:	aa 1f       	adc	r26, r26
 67a:	a4 17       	cp	r26, r20
 67c:	10 f0       	brcs	.+4      	; 0x682 <__utoa_common+0x14>
 67e:	a4 1b       	sub	r26, r20
 680:	83 95       	inc	r24
 682:	50 51       	subi	r21, 0x10	; 16
 684:	b9 f7       	brne	.-18     	; 0x674 <__utoa_common+0x6>
 686:	a0 5d       	subi	r26, 0xD0	; 208
 688:	aa 33       	cpi	r26, 0x3A	; 58
 68a:	08 f0       	brcs	.+2      	; 0x68e <__utoa_common+0x20>
 68c:	a9 5d       	subi	r26, 0xD9	; 217
 68e:	a1 93       	st	Z+, r26
 690:	00 97       	sbiw	r24, 0x00	; 0
 692:	79 f7       	brne	.-34     	; 0x672 <__utoa_common+0x4>
 694:	b1 11       	cpse	r27, r1
 696:	b1 93       	st	Z+, r27
 698:	11 92       	st	Z+, r1
 69a:	cb 01       	movw	r24, r22
 69c:	0c 94 50 03 	jmp	0x6a0	; 0x6a0 <strrev>

000006a0 <strrev>:
 6a0:	dc 01       	movw	r26, r24
 6a2:	fc 01       	movw	r30, r24
 6a4:	67 2f       	mov	r22, r23
 6a6:	71 91       	ld	r23, Z+
 6a8:	77 23       	and	r23, r23
 6aa:	e1 f7       	brne	.-8      	; 0x6a4 <strrev+0x4>
 6ac:	32 97       	sbiw	r30, 0x02	; 2
 6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <strrev+0x18>
 6b0:	7c 91       	ld	r23, X
 6b2:	6d 93       	st	X+, r22
 6b4:	70 83       	st	Z, r23
 6b6:	62 91       	ld	r22, -Z
 6b8:	ae 17       	cp	r26, r30
 6ba:	bf 07       	cpc	r27, r31
 6bc:	c8 f3       	brcs	.-14     	; 0x6b0 <strrev+0x10>
 6be:	08 95       	ret

000006c0 <_exit>:
 6c0:	f8 94       	cli

000006c2 <__stop_program>:
 6c2:	ff cf       	rjmp	.-2      	; 0x6c2 <__stop_program>
