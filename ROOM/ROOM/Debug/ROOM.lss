
ROOM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000330  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c0f  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d1  00000000  00000000  0000108f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000054d  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  00001cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000447  00000000  00000000  00001d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000240  00000000  00000000  000021c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002403  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 22 01 	call	0x244	; 0x244 <main>
  64:	0c 94 96 01 	jmp	0x32c	; 0x32c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Set_PinDir>:
		break;
	case PORT_C:
		DDRC = value;
		break;
	case PORT_D:
		DDRD = value;
  6c:	41 30       	cpi	r20, 0x01	; 1
  6e:	a1 f5       	brne	.+104    	; 0xd8 <Set_PinDir+0x6c>
  70:	81 30       	cpi	r24, 0x01	; 1
  72:	89 f0       	breq	.+34     	; 0x96 <Set_PinDir+0x2a>
  74:	28 f0       	brcs	.+10     	; 0x80 <Set_PinDir+0x14>
  76:	82 30       	cpi	r24, 0x02	; 2
  78:	c9 f0       	breq	.+50     	; 0xac <Set_PinDir+0x40>
  7a:	83 30       	cpi	r24, 0x03	; 3
  7c:	11 f1       	breq	.+68     	; 0xc2 <Set_PinDir+0x56>
  7e:	08 95       	ret
  80:	2a b3       	in	r18, 0x1a	; 26
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <Set_PinDir+0x20>
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	6a 95       	dec	r22
  8e:	e2 f7       	brpl	.-8      	; 0x88 <Set_PinDir+0x1c>
  90:	82 2b       	or	r24, r18
  92:	8a bb       	out	0x1a, r24	; 26
  94:	08 95       	ret
  96:	27 b3       	in	r18, 0x17	; 23
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <Set_PinDir+0x36>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <Set_PinDir+0x32>
  a6:	82 2b       	or	r24, r18
  a8:	87 bb       	out	0x17, r24	; 23
  aa:	08 95       	ret
  ac:	24 b3       	in	r18, 0x14	; 20
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <Set_PinDir+0x4c>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <Set_PinDir+0x48>
  bc:	82 2b       	or	r24, r18
  be:	84 bb       	out	0x14, r24	; 20
  c0:	08 95       	ret
  c2:	21 b3       	in	r18, 0x11	; 17
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <Set_PinDir+0x62>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <Set_PinDir+0x5e>
  d2:	82 2b       	or	r24, r18
  d4:	81 bb       	out	0x11, r24	; 17
  d6:	08 95       	ret
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	91 f0       	breq	.+36     	; 0x100 <Set_PinDir+0x94>
  dc:	28 f0       	brcs	.+10     	; 0xe8 <Set_PinDir+0x7c>
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	d9 f0       	breq	.+54     	; 0x118 <Set_PinDir+0xac>
  e2:	83 30       	cpi	r24, 0x03	; 3
  e4:	29 f1       	breq	.+74     	; 0x130 <Set_PinDir+0xc4>
  e6:	08 95       	ret
  e8:	2a b3       	in	r18, 0x1a	; 26
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <Set_PinDir+0x88>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <Set_PinDir+0x84>
  f8:	80 95       	com	r24
  fa:	82 23       	and	r24, r18
  fc:	8a bb       	out	0x1a, r24	; 26
  fe:	08 95       	ret
 100:	27 b3       	in	r18, 0x17	; 23
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <Set_PinDir+0xa0>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <Set_PinDir+0x9c>
 110:	80 95       	com	r24
 112:	82 23       	and	r24, r18
 114:	87 bb       	out	0x17, r24	; 23
 116:	08 95       	ret
 118:	24 b3       	in	r18, 0x14	; 20
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <Set_PinDir+0xb8>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <Set_PinDir+0xb4>
 128:	80 95       	com	r24
 12a:	82 23       	and	r24, r18
 12c:	84 bb       	out	0x14, r24	; 20
 12e:	08 95       	ret
 130:	21 b3       	in	r18, 0x11	; 17
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <Set_PinDir+0xd0>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <Set_PinDir+0xcc>
 140:	80 95       	com	r24
 142:	82 23       	and	r24, r18
 144:	81 bb       	out	0x11, r24	; 17
 146:	08 95       	ret

00000148 <Set_PinLevel>:
 148:	41 30       	cpi	r20, 0x01	; 1
 14a:	a1 f5       	brne	.+104    	; 0x1b4 <Set_PinLevel+0x6c>
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	89 f0       	breq	.+34     	; 0x172 <Set_PinLevel+0x2a>
 150:	28 f0       	brcs	.+10     	; 0x15c <Set_PinLevel+0x14>
 152:	82 30       	cpi	r24, 0x02	; 2
 154:	c9 f0       	breq	.+50     	; 0x188 <Set_PinLevel+0x40>
 156:	83 30       	cpi	r24, 0x03	; 3
 158:	11 f1       	breq	.+68     	; 0x19e <Set_PinLevel+0x56>
 15a:	08 95       	ret
 15c:	2b b3       	in	r18, 0x1b	; 27
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <Set_PinLevel+0x20>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <Set_PinLevel+0x1c>
 16c:	82 2b       	or	r24, r18
 16e:	8b bb       	out	0x1b, r24	; 27
 170:	08 95       	ret
 172:	28 b3       	in	r18, 0x18	; 24
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <Set_PinLevel+0x36>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <Set_PinLevel+0x32>
 182:	82 2b       	or	r24, r18
 184:	88 bb       	out	0x18, r24	; 24
 186:	08 95       	ret
 188:	25 b3       	in	r18, 0x15	; 21
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <Set_PinLevel+0x4c>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <Set_PinLevel+0x48>
 198:	82 2b       	or	r24, r18
 19a:	85 bb       	out	0x15, r24	; 21
 19c:	08 95       	ret
 19e:	22 b3       	in	r18, 0x12	; 18
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <Set_PinLevel+0x62>
 1a6:	88 0f       	add	r24, r24
 1a8:	99 1f       	adc	r25, r25
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <Set_PinLevel+0x5e>
 1ae:	82 2b       	or	r24, r18
 1b0:	82 bb       	out	0x12, r24	; 18
 1b2:	08 95       	ret
 1b4:	81 30       	cpi	r24, 0x01	; 1
 1b6:	91 f0       	breq	.+36     	; 0x1dc <Set_PinLevel+0x94>
 1b8:	28 f0       	brcs	.+10     	; 0x1c4 <Set_PinLevel+0x7c>
 1ba:	82 30       	cpi	r24, 0x02	; 2
 1bc:	d9 f0       	breq	.+54     	; 0x1f4 <Set_PinLevel+0xac>
 1be:	83 30       	cpi	r24, 0x03	; 3
 1c0:	29 f1       	breq	.+74     	; 0x20c <Set_PinLevel+0xc4>
 1c2:	08 95       	ret
 1c4:	2b b3       	in	r18, 0x1b	; 27
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <Set_PinLevel+0x88>
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <Set_PinLevel+0x84>
 1d4:	80 95       	com	r24
 1d6:	82 23       	and	r24, r18
 1d8:	8b bb       	out	0x1b, r24	; 27
 1da:	08 95       	ret
 1dc:	28 b3       	in	r18, 0x18	; 24
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <Set_PinLevel+0xa0>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <Set_PinLevel+0x9c>
 1ec:	80 95       	com	r24
 1ee:	82 23       	and	r24, r18
 1f0:	88 bb       	out	0x18, r24	; 24
 1f2:	08 95       	ret
 1f4:	25 b3       	in	r18, 0x15	; 21
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <Set_PinLevel+0xb8>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <Set_PinLevel+0xb4>
 204:	80 95       	com	r24
 206:	82 23       	and	r24, r18
 208:	85 bb       	out	0x15, r24	; 21
 20a:	08 95       	ret
 20c:	22 b3       	in	r18, 0x12	; 18
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <Set_PinLevel+0xd0>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <Set_PinLevel+0xcc>
 21c:	80 95       	com	r24
 21e:	82 23       	and	r24, r18
 220:	82 bb       	out	0x12, r24	; 18
 222:	08 95       	ret

00000224 <Set_GroupLevel>:
	}
}

void Set_GroupLevel (GroupName_t group, u8 value)							// Function to set level of group of pins
{
	switch (group)
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	41 f0       	breq	.+16     	; 0x238 <Set_GroupLevel+0x14>
 228:	28 f0       	brcs	.+10     	; 0x234 <Set_GroupLevel+0x10>
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	39 f0       	breq	.+14     	; 0x23c <Set_GroupLevel+0x18>
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	39 f0       	breq	.+14     	; 0x240 <Set_GroupLevel+0x1c>
 232:	08 95       	ret
	{
	case PORT_A:
		PORTA = value;
 234:	6b bb       	out	0x1b, r22	; 27
		break;
 236:	08 95       	ret
	case PORT_B:
		PORTB = value;
 238:	68 bb       	out	0x18, r22	; 24
		break;
 23a:	08 95       	ret
	case PORT_C:
		PORTC = value;
 23c:	65 bb       	out	0x15, r22	; 21
		break;
 23e:	08 95       	ret
	case PORT_D:
		PORTD = value;
 240:	62 bb       	out	0x12, r22	; 18
 242:	08 95       	ret

00000244 <main>:
#include "DIO.h"
#include "UART.h"

int main()
{
	USART_Init();
 244:	0e 94 88 01 	call	0x310	; 0x310 <USART_Init>
	Set_PinDir(PORT_B,Pin_0,OUTPUT);
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 36 00 	call	0x6c	; 0x6c <Set_PinDir>
	Set_PinDir(PORT_B,Pin_1,OUTPUT);
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 36 00 	call	0x6c	; 0x6c <Set_PinDir>
	Set_PinDir(PORT_C,Pin_0,OUTPUT);
 25c:	41 e0       	ldi	r20, 0x01	; 1
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	82 e0       	ldi	r24, 0x02	; 2
 262:	0e 94 36 00 	call	0x6c	; 0x6c <Set_PinDir>
	Set_PinDir(PORT_C,Pin_1,OUTPUT);
 266:	41 e0       	ldi	r20, 0x01	; 1
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	0e 94 36 00 	call	0x6c	; 0x6c <Set_PinDir>
	Set_PinDir(PORT_C,Pin_2,OUTPUT);
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	62 e0       	ldi	r22, 0x02	; 2
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	0e 94 36 00 	call	0x6c	; 0x6c <Set_PinDir>
	
	
	while(1)
	{

		if(USART_receiveByte() == 'H')			// Alarm On
 27a:	0e 94 92 01 	call	0x324	; 0x324 <USART_receiveByte>
 27e:	88 34       	cpi	r24, 0x48	; 72
 280:	a9 f4       	brne	.+42     	; 0x2ac <main+0x68>
		{
			Set_PinLevel(PORT_B,Pin_0,HIGH);
 282:	41 e0       	ldi	r20, 0x01	; 1
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 a4 00 	call	0x148	; 0x148 <Set_PinLevel>
			Set_PinLevel(PORT_B,Pin_1,HIGH);
 28c:	41 e0       	ldi	r20, 0x01	; 1
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	0e 94 a4 00 	call	0x148	; 0x148 <Set_PinLevel>
			Set_PinLevel(PORT_C,Pin_2,HIGH);
 296:	41 e0       	ldi	r20, 0x01	; 1
 298:	62 e0       	ldi	r22, 0x02	; 2
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	0e 94 a4 00 	call	0x148	; 0x148 <Set_PinLevel>
			Set_PinLevel(PORT_C,Pin_1,HIGH);
 2a0:	41 e0       	ldi	r20, 0x01	; 1
 2a2:	61 e0       	ldi	r22, 0x01	; 1
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	0e 94 a4 00 	call	0x148	; 0x148 <Set_PinLevel>
 2aa:	23 c0       	rjmp	.+70     	; 0x2f2 <main+0xae>
		}
		else if(USART_receiveByte() == 'F')		// Fan On
 2ac:	0e 94 92 01 	call	0x324	; 0x324 <USART_receiveByte>
 2b0:	86 34       	cpi	r24, 0x46	; 70
 2b2:	81 f4       	brne	.+32     	; 0x2d4 <main+0x90>
		{
			Set_PinLevel(PORT_B,Pin_0,HIGH);
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 a4 00 	call	0x148	; 0x148 <Set_PinLevel>
			Set_PinLevel(PORT_B,Pin_1,LOW);
 2be:	40 e0       	ldi	r20, 0x00	; 0
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 a4 00 	call	0x148	; 0x148 <Set_PinLevel>
			Set_PinLevel(PORT_C,Pin_1,HIGH);
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	0e 94 a4 00 	call	0x148	; 0x148 <Set_PinLevel>
 2d2:	0f c0       	rjmp	.+30     	; 0x2f2 <main+0xae>
			
		}
		else                                    // Alarm Off
		{
			Set_PinLevel(PORT_B,Pin_0,LOW);
 2d4:	40 e0       	ldi	r20, 0x00	; 0
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 a4 00 	call	0x148	; 0x148 <Set_PinLevel>
			Set_PinLevel(PORT_B,Pin_1,LOW);
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 a4 00 	call	0x148	; 0x148 <Set_PinLevel>
			Set_PinLevel(PORT_C,Pin_2,LOW);
 2e8:	40 e0       	ldi	r20, 0x00	; 0
 2ea:	62 e0       	ldi	r22, 0x02	; 2
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	0e 94 a4 00 	call	0x148	; 0x148 <Set_PinLevel>
			
		}

		if(USART_receiveByte() == 'L')			// Led On
 2f2:	0e 94 92 01 	call	0x324	; 0x324 <USART_receiveByte>
 2f6:	8c 34       	cpi	r24, 0x4C	; 76
 2f8:	31 f4       	brne	.+12     	; 0x306 <main+0xc2>
		{
		  Set_PinLevel(PORT_C,Pin_0,HIGH);
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	60 e0       	ldi	r22, 0x00	; 0
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	0e 94 a4 00 	call	0x148	; 0x148 <Set_PinLevel>
 304:	ba cf       	rjmp	.-140    	; 0x27a <main+0x36>
		
		}
		else
		{
			Set_GroupLevel(PORT_C,0x00);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	0e 94 12 01 	call	0x224	; 0x224 <Set_GroupLevel>
 30e:	b5 cf       	rjmp	.-150    	; 0x27a <main+0x36>

00000310 <USART_Init>:
}

void USART_sendByte (u8 data)			// Function to send data byte
{
	while (BIT_IS_CLEAR(UCSRA,UDRE));	//Polling until UDR register is empty and ready to take data
	UDR = data;						    //Set data to UDR register
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	8b b9       	out	0x0b, r24	; 11
 314:	88 e1       	ldi	r24, 0x18	; 24
 316:	8a b9       	out	0x0a, r24	; 10
 318:	86 e8       	ldi	r24, 0x86	; 134
 31a:	80 bd       	out	0x20, r24	; 32
 31c:	10 bc       	out	0x20, r1	; 32
 31e:	8c e0       	ldi	r24, 0x0C	; 12
 320:	89 b9       	out	0x09, r24	; 9
 322:	08 95       	ret

00000324 <USART_receiveByte>:

}

u8 USART_receiveByte (void)				// Function to receive data byte
{
	while (BIT_IS_CLEAR(UCSRA,RXC));	//Polling until UDR register is full with data
 324:	5f 9b       	sbis	0x0b, 7	; 11
 326:	fe cf       	rjmp	.-4      	; 0x324 <USART_receiveByte>
	return UDR;							// Return the data from UDR register
 328:	8c b1       	in	r24, 0x0c	; 12
}
 32a:	08 95       	ret

0000032c <_exit>:
 32c:	f8 94       	cli

0000032e <__stop_program>:
 32e:	ff cf       	rjmp	.-2      	; 0x32e <__stop_program>
