
DOOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a34  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00800060  00000a34  00000aa8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000b5a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b8c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a41  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000096b  00000000  00000000  000026e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c22  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000017c  00000000  00000000  00003c78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000056c  00000000  00000000  00003df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000011e6  00000000  00000000  00004360  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00005546  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	74 01       	movw	r14, r8
  56:	76 01       	movw	r14, r12
  58:	57 01       	movw	r10, r14
  5a:	59 01       	movw	r10, r18
  5c:	5b 01       	movw	r10, r22
  5e:	5d 01       	movw	r10, r26
  60:	5f 01       	movw	r10, r30
  62:	61 01       	movw	r12, r2
  64:	63 01       	movw	r12, r6
  66:	65 01       	movw	r12, r10
  68:	67 01       	movw	r12, r14
  6a:	69 01       	movw	r12, r18
  6c:	6b 01       	movw	r12, r22
  6e:	6d 01       	movw	r12, r26
  70:	6f 01       	movw	r12, r30
  72:	71 01       	movw	r14, r2

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e4 e3       	ldi	r30, 0x34	; 52
  88:	fa e0       	ldi	r31, 0x0A	; 10
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a2 31       	cpi	r26, 0x12	; 18
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>
  96:	0e 94 5f 02 	call	0x4be	; 0x4be <main>
  9a:	0c 94 18 05 	jmp	0xa30	; 0xa30 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <Set_PinDir>:
	case PORT_D:
		ret = BIT_IS_SET(PIND,number);
		break;
	}
	return ret;
}
  a2:	41 30       	cpi	r20, 0x01	; 1
  a4:	a1 f5       	brne	.+104    	; 0x10e <Set_PinDir+0x6c>
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	89 f0       	breq	.+34     	; 0xcc <Set_PinDir+0x2a>
  aa:	28 f0       	brcs	.+10     	; 0xb6 <Set_PinDir+0x14>
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	c9 f0       	breq	.+50     	; 0xe2 <Set_PinDir+0x40>
  b0:	83 30       	cpi	r24, 0x03	; 3
  b2:	11 f1       	breq	.+68     	; 0xf8 <Set_PinDir+0x56>
  b4:	08 95       	ret
  b6:	2a b3       	in	r18, 0x1a	; 26
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <Set_PinDir+0x20>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <Set_PinDir+0x1c>
  c6:	82 2b       	or	r24, r18
  c8:	8a bb       	out	0x1a, r24	; 26
  ca:	08 95       	ret
  cc:	27 b3       	in	r18, 0x17	; 23
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <Set_PinDir+0x36>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <Set_PinDir+0x32>
  dc:	82 2b       	or	r24, r18
  de:	87 bb       	out	0x17, r24	; 23
  e0:	08 95       	ret
  e2:	24 b3       	in	r18, 0x14	; 20
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	02 c0       	rjmp	.+4      	; 0xee <Set_PinDir+0x4c>
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	6a 95       	dec	r22
  f0:	e2 f7       	brpl	.-8      	; 0xea <Set_PinDir+0x48>
  f2:	82 2b       	or	r24, r18
  f4:	84 bb       	out	0x14, r24	; 20
  f6:	08 95       	ret
  f8:	21 b3       	in	r18, 0x11	; 17
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <Set_PinDir+0x62>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <Set_PinDir+0x5e>
 108:	82 2b       	or	r24, r18
 10a:	81 bb       	out	0x11, r24	; 17
 10c:	08 95       	ret
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	91 f0       	breq	.+36     	; 0x136 <Set_PinDir+0x94>
 112:	28 f0       	brcs	.+10     	; 0x11e <Set_PinDir+0x7c>
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	d9 f0       	breq	.+54     	; 0x14e <Set_PinDir+0xac>
 118:	83 30       	cpi	r24, 0x03	; 3
 11a:	29 f1       	breq	.+74     	; 0x166 <Set_PinDir+0xc4>
 11c:	08 95       	ret
 11e:	2a b3       	in	r18, 0x1a	; 26
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <Set_PinDir+0x88>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <Set_PinDir+0x84>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	8a bb       	out	0x1a, r24	; 26
 134:	08 95       	ret
 136:	27 b3       	in	r18, 0x17	; 23
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <Set_PinDir+0xa0>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <Set_PinDir+0x9c>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	87 bb       	out	0x17, r24	; 23
 14c:	08 95       	ret
 14e:	24 b3       	in	r18, 0x14	; 20
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <Set_PinDir+0xb8>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <Set_PinDir+0xb4>
 15e:	80 95       	com	r24
 160:	82 23       	and	r24, r18
 162:	84 bb       	out	0x14, r24	; 20
 164:	08 95       	ret
 166:	21 b3       	in	r18, 0x11	; 17
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <Set_PinDir+0xd0>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <Set_PinDir+0xcc>
 176:	80 95       	com	r24
 178:	82 23       	and	r24, r18
 17a:	81 bb       	out	0x11, r24	; 17
 17c:	08 95       	ret

0000017e <Set_PinLevel>:
 17e:	41 30       	cpi	r20, 0x01	; 1
 180:	a1 f5       	brne	.+104    	; 0x1ea <Set_PinLevel+0x6c>
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	89 f0       	breq	.+34     	; 0x1a8 <Set_PinLevel+0x2a>
 186:	28 f0       	brcs	.+10     	; 0x192 <Set_PinLevel+0x14>
 188:	82 30       	cpi	r24, 0x02	; 2
 18a:	c9 f0       	breq	.+50     	; 0x1be <Set_PinLevel+0x40>
 18c:	83 30       	cpi	r24, 0x03	; 3
 18e:	11 f1       	breq	.+68     	; 0x1d4 <Set_PinLevel+0x56>
 190:	08 95       	ret
 192:	2b b3       	in	r18, 0x1b	; 27
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <Set_PinLevel+0x20>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <Set_PinLevel+0x1c>
 1a2:	82 2b       	or	r24, r18
 1a4:	8b bb       	out	0x1b, r24	; 27
 1a6:	08 95       	ret
 1a8:	28 b3       	in	r18, 0x18	; 24
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <Set_PinLevel+0x36>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <Set_PinLevel+0x32>
 1b8:	82 2b       	or	r24, r18
 1ba:	88 bb       	out	0x18, r24	; 24
 1bc:	08 95       	ret
 1be:	25 b3       	in	r18, 0x15	; 21
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	02 c0       	rjmp	.+4      	; 0x1ca <Set_PinLevel+0x4c>
 1c6:	88 0f       	add	r24, r24
 1c8:	99 1f       	adc	r25, r25
 1ca:	6a 95       	dec	r22
 1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <Set_PinLevel+0x48>
 1ce:	82 2b       	or	r24, r18
 1d0:	85 bb       	out	0x15, r24	; 21
 1d2:	08 95       	ret
 1d4:	22 b3       	in	r18, 0x12	; 18
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <Set_PinLevel+0x62>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	6a 95       	dec	r22
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <Set_PinLevel+0x5e>
 1e4:	82 2b       	or	r24, r18
 1e6:	82 bb       	out	0x12, r24	; 18
 1e8:	08 95       	ret
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	91 f0       	breq	.+36     	; 0x212 <Set_PinLevel+0x94>
 1ee:	28 f0       	brcs	.+10     	; 0x1fa <Set_PinLevel+0x7c>
 1f0:	82 30       	cpi	r24, 0x02	; 2
 1f2:	d9 f0       	breq	.+54     	; 0x22a <Set_PinLevel+0xac>
 1f4:	83 30       	cpi	r24, 0x03	; 3
 1f6:	29 f1       	breq	.+74     	; 0x242 <Set_PinLevel+0xc4>
 1f8:	08 95       	ret
 1fa:	2b b3       	in	r18, 0x1b	; 27
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <Set_PinLevel+0x88>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <Set_PinLevel+0x84>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	8b bb       	out	0x1b, r24	; 27
 210:	08 95       	ret
 212:	28 b3       	in	r18, 0x18	; 24
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <Set_PinLevel+0xa0>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <Set_PinLevel+0x9c>
 222:	80 95       	com	r24
 224:	82 23       	and	r24, r18
 226:	88 bb       	out	0x18, r24	; 24
 228:	08 95       	ret
 22a:	25 b3       	in	r18, 0x15	; 21
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <Set_PinLevel+0xb8>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <Set_PinLevel+0xb4>
 23a:	80 95       	com	r24
 23c:	82 23       	and	r24, r18
 23e:	85 bb       	out	0x15, r24	; 21
 240:	08 95       	ret
 242:	22 b3       	in	r18, 0x12	; 18
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <Set_PinLevel+0xd0>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <Set_PinLevel+0xcc>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	82 bb       	out	0x12, r24	; 18
 258:	08 95       	ret

0000025a <Set_GroupDir>:

//	 For Group Of Pins

void Set_GroupDir (GroupName_t group, u8 value)							// Function to set direction of group of pins
{
	switch (group)
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	41 f0       	breq	.+16     	; 0x26e <Set_GroupDir+0x14>
 25e:	28 f0       	brcs	.+10     	; 0x26a <Set_GroupDir+0x10>
 260:	82 30       	cpi	r24, 0x02	; 2
 262:	39 f0       	breq	.+14     	; 0x272 <Set_GroupDir+0x18>
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	39 f0       	breq	.+14     	; 0x276 <Set_GroupDir+0x1c>
 268:	08 95       	ret
	{
	case PORT_A:
		DDRA = value;
 26a:	6a bb       	out	0x1a, r22	; 26
		break;
 26c:	08 95       	ret
	case PORT_B:
		DDRB = value;
 26e:	67 bb       	out	0x17, r22	; 23
		break;
 270:	08 95       	ret
	case PORT_C:
		DDRC = value;
 272:	64 bb       	out	0x14, r22	; 20
		break;
 274:	08 95       	ret
	case PORT_D:
		DDRD = value;
 276:	61 bb       	out	0x11, r22	; 17
 278:	08 95       	ret

0000027a <Set_GroupLevel>:
	}
}

void Set_GroupLevel (GroupName_t group, u8 value)							// Function to set level of group of pins
{
	switch (group)
 27a:	81 30       	cpi	r24, 0x01	; 1
 27c:	41 f0       	breq	.+16     	; 0x28e <Set_GroupLevel+0x14>
 27e:	28 f0       	brcs	.+10     	; 0x28a <Set_GroupLevel+0x10>
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	39 f0       	breq	.+14     	; 0x292 <Set_GroupLevel+0x18>
 284:	83 30       	cpi	r24, 0x03	; 3
 286:	39 f0       	breq	.+14     	; 0x296 <Set_GroupLevel+0x1c>
 288:	08 95       	ret
	{
	case PORT_A:
		PORTA = value;
 28a:	6b bb       	out	0x1b, r22	; 27
		break;
 28c:	08 95       	ret
	case PORT_B:
		PORTB = value;
 28e:	68 bb       	out	0x18, r22	; 24
		break;
 290:	08 95       	ret
	case PORT_C:
		PORTC = value;
 292:	65 bb       	out	0x15, r22	; 21
		break;
 294:	08 95       	ret
	case PORT_D:
		PORTD = value;
 296:	62 bb       	out	0x12, r22	; 18
 298:	08 95       	ret

0000029a <Keypad_4x4_adjustKeyNumber>:
}


static u8 Keypad_4x4_adjustKeyNumber (u8 button_number)
{
	switch (button_number)
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	fc 01       	movw	r30, r24
 29e:	31 97       	sbiw	r30, 0x01	; 1
 2a0:	e0 31       	cpi	r30, 0x10	; 16
 2a2:	f1 05       	cpc	r31, r1
 2a4:	00 f5       	brcc	.+64     	; 0x2e6 <Keypad_4x4_adjustKeyNumber+0x4c>
 2a6:	e6 5d       	subi	r30, 0xD6	; 214
 2a8:	ff 4f       	sbci	r31, 0xFF	; 255
 2aa:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__tablejump2__>
	{
		case 1:		return 7;
		break;
		case 2:		return 8;
		break;
		case 3:		return 9;
 2ae:	89 e0       	ldi	r24, 0x09	; 9
 2b0:	08 95       	ret
		break;
		case 4:		return '/';
 2b2:	8f e2       	ldi	r24, 0x2F	; 47
 2b4:	08 95       	ret
		break;
		case 5:		return 4;
 2b6:	84 e0       	ldi	r24, 0x04	; 4
 2b8:	08 95       	ret
		break;
		case 6:		return 5;
 2ba:	85 e0       	ldi	r24, 0x05	; 5
 2bc:	08 95       	ret
		break;
		case 7:		return 6;
 2be:	86 e0       	ldi	r24, 0x06	; 6
 2c0:	08 95       	ret
		break;
		case 8:		return '*';
 2c2:	8a e2       	ldi	r24, 0x2A	; 42
 2c4:	08 95       	ret
		break;
		case 9:		return 1;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	08 95       	ret
		break;
		case 10:	return 2;
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	08 95       	ret
		break;
		case 11:	return 3;
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	08 95       	ret
		break;
		case 12:	return '-';
 2d2:	8d e2       	ldi	r24, 0x2D	; 45
 2d4:	08 95       	ret
		break;
		case 13:	return 'c';
 2d6:	83 e6       	ldi	r24, 0x63	; 99
 2d8:	08 95       	ret
		break;
		case 14:	return 0;
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	08 95       	ret
		break;
		case 15:	return '=';
 2de:	8d e3       	ldi	r24, 0x3D	; 61
 2e0:	08 95       	ret
		break;
		case 16:	return '+';
 2e2:	8b e2       	ldi	r24, 0x2B	; 43
 2e4:	08 95       	ret
		break;
	}
}
 2e6:	08 95       	ret

static u8 Keypad_4x4_adjustKeyNumber (u8 button_number)
{
	switch (button_number)
	{
		case 1:		return 7;
 2e8:	87 e0       	ldi	r24, 0x07	; 7
 2ea:	08 95       	ret
		break;
		case 2:		return 8;
 2ec:	88 e0       	ldi	r24, 0x08	; 8
		case 15:	return '=';
		break;
		case 16:	return '+';
		break;
	}
}
 2ee:	08 95       	ret

000002f0 <Keypad_GetPressedKey>:
u8 Keypad_GetPressedKey (void)
{
	u8 row, col;
	while(1)
	{
		for (col = 0; col < N_COL; col++)
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	22 c0       	rjmp	.+68     	; 0x338 <Keypad_GetPressedKey+0x48>
		{
			KEYPAD_PORT_DIR = (0b00010000<< col);
 2f4:	20 e1       	ldi	r18, 0x10	; 16
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	08 2e       	mov	r0, r24
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <Keypad_GetPressedKey+0x10>
 2fc:	22 0f       	add	r18, r18
 2fe:	33 1f       	adc	r19, r19
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <Keypad_GetPressedKey+0xc>
 304:	2a bb       	out	0x1a, r18	; 26

			KEYPAD_PORT_OUT = (~(0b00010000<< col));
 306:	20 95       	com	r18
 308:	2b bb       	out	0x1b, r18	; 27
			for (row = 0; row < N_ROW; row++)
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	12 c0       	rjmp	.+36     	; 0x332 <Keypad_GetPressedKey+0x42>
			
			{
				if (BIT_IS_CLEAR(KEYPAD_PORT_IN,row))
 30e:	29 b3       	in	r18, 0x19	; 25
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	09 2e       	mov	r0, r25
 314:	02 c0       	rjmp	.+4      	; 0x31a <Keypad_GetPressedKey+0x2a>
 316:	35 95       	asr	r19
 318:	27 95       	ror	r18
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <Keypad_GetPressedKey+0x26>
 31e:	20 fd       	sbrc	r18, 0
 320:	07 c0       	rjmp	.+14     	; 0x330 <Keypad_GetPressedKey+0x40>
				{
					#if (N_COL == 4)

					return Keypad_4x4_adjustKeyNumber (((row*N_COL)+col+1));
 322:	99 0f       	add	r25, r25
 324:	99 0f       	add	r25, r25
 326:	89 0f       	add	r24, r25
 328:	8f 5f       	subi	r24, 0xFF	; 255
 32a:	0e 94 4d 01 	call	0x29a	; 0x29a <Keypad_4x4_adjustKeyNumber>
 32e:	08 95       	ret
		for (col = 0; col < N_COL; col++)
		{
			KEYPAD_PORT_DIR = (0b00010000<< col);

			KEYPAD_PORT_OUT = (~(0b00010000<< col));
			for (row = 0; row < N_ROW; row++)
 330:	9f 5f       	subi	r25, 0xFF	; 255
 332:	94 30       	cpi	r25, 0x04	; 4
 334:	60 f3       	brcs	.-40     	; 0x30e <Keypad_GetPressedKey+0x1e>
u8 Keypad_GetPressedKey (void)
{
	u8 row, col;
	while(1)
	{
		for (col = 0; col < N_COL; col++)
 336:	8f 5f       	subi	r24, 0xFF	; 255
 338:	84 30       	cpi	r24, 0x04	; 4
 33a:	e0 f2       	brcs	.-72     	; 0x2f4 <Keypad_GetPressedKey+0x4>
 33c:	d9 cf       	rjmp	.-78     	; 0x2f0 <Keypad_GetPressedKey>

0000033e <Send_CMD>:
	_delay_ms(2);
}

void Send_CMD (u8 cmd)				                        // Function to send commands to LCD
{
	CLEAR_BIT(LCD_CTRL_PORT, RS);	                        // Send RS Pin = 0 (Command Instruction)
 33e:	92 b3       	in	r25, 0x12	; 18
 340:	9f 7d       	andi	r25, 0xDF	; 223
 342:	92 bb       	out	0x12, r25	; 18
	CLEAR_BIT(LCD_CTRL_PORT, RW);	                        // Send RW Pin = 0 (Write Mood)
 344:	92 b3       	in	r25, 0x12	; 18
 346:	9f 7b       	andi	r25, 0xBF	; 191
 348:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34a:	e9 ef       	ldi	r30, 0xF9	; 249
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	31 97       	sbiw	r30, 0x01	; 1
 350:	f1 f7       	brne	.-4      	; 0x34e <Send_CMD+0x10>
 352:	00 c0       	rjmp	.+0      	; 0x354 <Send_CMD+0x16>
 354:	00 00       	nop
	_delay_ms(1);					                        // Delay 40ns until Enable Start
	SET_BIT(LCD_CTRL_PORT, EN);		                        // Send EN Pin = 1 (Enable LCD)
 356:	92 b3       	in	r25, 0x12	; 18
 358:	90 68       	ori	r25, 0x80	; 128
 35a:	92 bb       	out	0x12, r25	; 18
 35c:	e9 ef       	ldi	r30, 0xF9	; 249
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	31 97       	sbiw	r30, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <Send_CMD+0x22>
 364:	00 c0       	rjmp	.+0      	; 0x366 <Send_CMD+0x28>
 366:	00 00       	nop
	_delay_ms(1);					                        // Delay 1500ns until Enable Start
	LCD_DATA_PORT = cmd; 			                        // Send command through data pins
 368:	88 bb       	out	0x18, r24	; 24
 36a:	89 ef       	ldi	r24, 0xF9	; 249
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <Send_CMD+0x30>
 372:	00 c0       	rjmp	.+0      	; 0x374 <Send_CMD+0x36>
 374:	00 00       	nop
	_delay_ms(1);					                        // Delay 10ns until data sending is finished
	CLEAR_BIT(LCD_CTRL_PORT, EN);	                        // Send EN Pin = 0 (Disable LCD)
 376:	82 b3       	in	r24, 0x12	; 18
 378:	8f 77       	andi	r24, 0x7F	; 127
 37a:	82 bb       	out	0x12, r24	; 18
 37c:	08 95       	ret

0000037e <LCD_Init>:



void LCD_Init (void)				                        // Function to initialize the LCD
{
	Set_GroupDir (LCD_DATA_PORT_DIR,0xFF);			        // Set PORTC as o/p port
 37e:	87 b3       	in	r24, 0x17	; 23
 380:	6f ef       	ldi	r22, 0xFF	; 255
 382:	0e 94 2d 01 	call	0x25a	; 0x25a <Set_GroupDir>
	LCD_CTRL_PORT_DIR = (1<<EN) | (1<<RS) | (1<<RW);        // Set RS, RW, EN pins as o/p port
 386:	80 ee       	ldi	r24, 0xE0	; 224
 388:	81 bb       	out	0x11, r24	; 17
 38a:	83 ed       	ldi	r24, 0xD3	; 211
 38c:	90 e3       	ldi	r25, 0x30	; 48
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	f1 f7       	brne	.-4      	; 0x38e <LCD_Init+0x10>
 392:	00 c0       	rjmp	.+0      	; 0x394 <LCD_Init+0x16>
 394:	00 00       	nop
	                                                        
	_delay_ms(50); 								            // Delay 50ms before function initialization
	Send_CMD (TWO_LINE_LCD_EIGHT_BIT_MODE);		            // Set LCD mode as 8-bit mode, 2-lines, 5*8 Dots
 396:	88 e3       	ldi	r24, 0x38	; 56
 398:	0e 94 9f 01 	call	0x33e	; 0x33e <Send_CMD>
 39c:	89 ef       	ldi	r24, 0xF9	; 249
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <LCD_Init+0x22>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <LCD_Init+0x28>
 3a6:	00 00       	nop
	_delay_ms(1);
	Send_CMD (CURSOR_OFF);						            // Choose Cursor as off
 3a8:	8c e0       	ldi	r24, 0x0C	; 12
 3aa:	0e 94 9f 01 	call	0x33e	; 0x33e <Send_CMD>
 3ae:	89 ef       	ldi	r24, 0xF9	; 249
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LCD_Init+0x34>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <LCD_Init+0x3a>
 3b8:	00 00       	nop
	_delay_ms(1);
	Send_CMD (CLEAR_COMMAND);					            // Clear LCD at initialization
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 9f 01 	call	0x33e	; 0x33e <Send_CMD>
 3c0:	83 ef       	ldi	r24, 0xF3	; 243
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <LCD_Init+0x46>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <LCD_Init+0x4c>
 3ca:	00 00       	nop
 3cc:	08 95       	ret

000003ce <Send_DATA>:
	CLEAR_BIT(LCD_CTRL_PORT, EN);	                        // Send EN Pin = 0 (Disable LCD)
}

void Send_DATA (u8 data)		                          	// Function to send data to LCD
{
	SET_BIT(LCD_CTRL_PORT, RS);		                        // Send RS Pin = 1 (Command Instruction)
 3ce:	92 b3       	in	r25, 0x12	; 18
 3d0:	90 62       	ori	r25, 0x20	; 32
 3d2:	92 bb       	out	0x12, r25	; 18
	CLEAR_BIT(LCD_CTRL_PORT, RW);                       	// Send RW Pin = 0 (Write Mood)
 3d4:	92 b3       	in	r25, 0x12	; 18
 3d6:	9f 7b       	andi	r25, 0xBF	; 191
 3d8:	92 bb       	out	0x12, r25	; 18
 3da:	e9 ef       	ldi	r30, 0xF9	; 249
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	31 97       	sbiw	r30, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <Send_DATA+0x10>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <Send_DATA+0x16>
 3e4:	00 00       	nop
	_delay_ms(1);					                        // Delay 40ns until Enable Start
	SET_BIT(LCD_CTRL_PORT, EN);		                        // Send EN Pin = 1 (Enable LCD)
 3e6:	92 b3       	in	r25, 0x12	; 18
 3e8:	90 68       	ori	r25, 0x80	; 128
 3ea:	92 bb       	out	0x12, r25	; 18
 3ec:	e9 ef       	ldi	r30, 0xF9	; 249
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	31 97       	sbiw	r30, 0x01	; 1
 3f2:	f1 f7       	brne	.-4      	; 0x3f0 <Send_DATA+0x22>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <Send_DATA+0x28>
 3f6:	00 00       	nop
	_delay_ms(1);				                        	// Delay 1500ns until Enable Start
	LCD_DATA_PORT = data; 			                        // Send data through data pins
 3f8:	88 bb       	out	0x18, r24	; 24
 3fa:	89 ef       	ldi	r24, 0xF9	; 249
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <Send_DATA+0x30>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 404:	00 00       	nop
	_delay_ms(1);					                        // Delay 10ns until data sending is finished
	CLEAR_BIT(LCD_CTRL_PORT, EN);	                        // Send E Pin = 0 (Disable LCD)
 406:	82 b3       	in	r24, 0x12	; 18
 408:	8f 77       	andi	r24, 0x7F	; 127
 40a:	82 bb       	out	0x12, r24	; 18
 40c:	08 95       	ret

0000040e <Display_Str>:
}

void Display_Str (const u8 *str)                         	// Function to send data to LCD
{
 40e:	0f 93       	push	r16
 410:	1f 93       	push	r17
 412:	cf 93       	push	r28
 414:	8c 01       	movw	r16, r24
	u8 i=0;
 416:	c0 e0       	ldi	r28, 0x00	; 0
	while (str[i] != '\0')
 418:	03 c0       	rjmp	.+6      	; 0x420 <Display_Str+0x12>
	{
		Send_DATA (str[i]);
 41a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <Send_DATA>
		i++;
 41e:	cf 5f       	subi	r28, 0xFF	; 255
}

void Display_Str (const u8 *str)                         	// Function to send data to LCD
{
	u8 i=0;
	while (str[i] != '\0')
 420:	f8 01       	movw	r30, r16
 422:	ec 0f       	add	r30, r28
 424:	f1 1d       	adc	r31, r1
 426:	80 81       	ld	r24, Z
 428:	81 11       	cpse	r24, r1
 42a:	f7 cf       	rjmp	.-18     	; 0x41a <Display_Str+0xc>
	{
		Send_DATA (str[i]);
		i++;
	}
}
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	08 95       	ret

00000434 <Go_To_Row_Col>:

void Go_To_Row_Col (u8 row, u8 col)                        	 // Function to move to certain column and row on LCD
{
	u8 Address;
	switch (row)
 434:	81 30       	cpi	r24, 0x01	; 1
 436:	31 f0       	breq	.+12     	; 0x444 <Go_To_Row_Col+0x10>
 438:	70 f0       	brcs	.+28     	; 0x456 <Go_To_Row_Col+0x22>
 43a:	82 30       	cpi	r24, 0x02	; 2
 43c:	31 f0       	breq	.+12     	; 0x44a <Go_To_Row_Col+0x16>
 43e:	83 30       	cpi	r24, 0x03	; 3
 440:	39 f0       	breq	.+14     	; 0x450 <Go_To_Row_Col+0x1c>
 442:	0a c0       	rjmp	.+20     	; 0x458 <Go_To_Row_Col+0x24>
	{
	case 0:
		Address = col;
		break;
	case 1:
		Address = col + 0x40;
 444:	90 e4       	ldi	r25, 0x40	; 64
 446:	96 0f       	add	r25, r22
		break;
 448:	07 c0       	rjmp	.+14     	; 0x458 <Go_To_Row_Col+0x24>
	case 2:
		Address = col + 0x10;
 44a:	90 e1       	ldi	r25, 0x10	; 16
 44c:	96 0f       	add	r25, r22
		break;
 44e:	04 c0       	rjmp	.+8      	; 0x458 <Go_To_Row_Col+0x24>
	case 3:
		Address = col + 0x50;
 450:	90 e5       	ldi	r25, 0x50	; 80
 452:	96 0f       	add	r25, r22
		break;
 454:	01 c0       	rjmp	.+2      	; 0x458 <Go_To_Row_Col+0x24>
{
	u8 Address;
	switch (row)
	{
	case 0:
		Address = col;
 456:	96 2f       	mov	r25, r22
	case 3:
		Address = col + 0x50;
		break;
	}
	
	Send_CMD (Address | SET_CURSOR_LOCATION);                 // To move cursor to the Address location
 458:	89 2f       	mov	r24, r25
 45a:	80 68       	ori	r24, 0x80	; 128
 45c:	0e 94 9f 01 	call	0x33e	; 0x33e <Send_CMD>
 460:	08 95       	ret

00000462 <LCD_CLEAR>:
}


void LCD_CLEAR (void)
{
	Send_CMD (CLEAR_COMMAND);
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	0e 94 9f 01 	call	0x33e	; 0x33e <Send_CMD>
 468:	08 95       	ret

0000046a <Display_Str_Row_Col>:
}

void Display_Str_Row_Col (u8 row, u8 col, const u8 *str)	   // Display string at specified row and column
{
 46a:	cf 93       	push	r28
 46c:	df 93       	push	r29
 46e:	ea 01       	movw	r28, r20
	Go_To_Row_Col (row,col);
 470:	0e 94 1a 02 	call	0x434	; 0x434 <Go_To_Row_Col>
	Display_Str (str);
 474:	ce 01       	movw	r24, r28
 476:	0e 94 07 02 	call	0x40e	; 0x40e <Display_Str>
}
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	08 95       	ret

00000480 <Integer_TO_String>:

void Integer_TO_String (u8 value)	                            // Display certain integer value on screen
{
 480:	cf 93       	push	r28
 482:	df 93       	push	r29
 484:	cd b7       	in	r28, 0x3d	; 61
 486:	de b7       	in	r29, 0x3e	; 62
 488:	6e 97       	sbiw	r28, 0x1e	; 30
 48a:	0f b6       	in	r0, 0x3f	; 63
 48c:	f8 94       	cli
 48e:	de bf       	out	0x3e, r29	; 62
 490:	0f be       	out	0x3f, r0	; 63
 492:	cd bf       	out	0x3d, r28	; 61
	u8 number_str[30];
	itoa (value, number_str, 10);
 494:	4a e0       	ldi	r20, 0x0A	; 10
 496:	50 e0       	ldi	r21, 0x00	; 0
 498:	be 01       	movw	r22, r28
 49a:	6f 5f       	subi	r22, 0xFF	; 255
 49c:	7f 4f       	sbci	r23, 0xFF	; 255
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <itoa>
	Display_Str (number_str);
 4a4:	ce 01       	movw	r24, r28
 4a6:	01 96       	adiw	r24, 0x01	; 1
 4a8:	0e 94 07 02 	call	0x40e	; 0x40e <Display_Str>
}
 4ac:	6e 96       	adiw	r28, 0x1e	; 30
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	f8 94       	cli
 4b2:	de bf       	out	0x3e, r29	; 62
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	cd bf       	out	0x3d, r28	; 61
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	08 95       	ret

000004be <main>:
	u32 Saved_Pass = 1234;
	u32 Reversed_Pass = 4321;
	u32 Get_Reversed_Pass = 0;
	u32 Temp_Pass = 0;
	u32 Comp_Pass =  0;
	u8 motor_steps[2] = {6,3};
 4be:	16 e0       	ldi	r17, 0x06	; 6
 4c0:	d3 e0       	ldi	r29, 0x03	; 3
	Set_GroupDir(PORT_C,0x0F);
 4c2:	6f e0       	ldi	r22, 0x0F	; 15
 4c4:	82 e0       	ldi	r24, 0x02	; 2
 4c6:	0e 94 2d 01 	call	0x25a	; 0x25a <Set_GroupDir>
	Set_GroupLevel(PORT_C,0xF0);
 4ca:	60 ef       	ldi	r22, 0xF0	; 240
 4cc:	82 e0       	ldi	r24, 0x02	; 2
 4ce:	0e 94 3d 01 	call	0x27a	; 0x27a <Set_GroupLevel>
	LCD_Init ();
 4d2:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_Init>
	Display_Str_Row_Col(0,2,"Welcome Back ");
 4d6:	40 e6       	ldi	r20, 0x60	; 96
 4d8:	50 e0       	ldi	r21, 0x00	; 0
 4da:	62 e0       	ldi	r22, 0x02	; 2
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	0e 94 35 02 	call	0x46a	; 0x46a <Display_Str_Row_Col>
 4e2:	2f e9       	ldi	r18, 0x9F	; 159
 4e4:	86 e8       	ldi	r24, 0x86	; 134
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	21 50       	subi	r18, 0x01	; 1
 4ea:	80 40       	sbci	r24, 0x00	; 0
 4ec:	90 40       	sbci	r25, 0x00	; 0
 4ee:	e1 f7       	brne	.-8      	; 0x4e8 <main+0x2a>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <main+0x34>
 4f2:	00 00       	nop
	_delay_ms(500);
	Set_PinDir(PORT_D,Pin_0,OUTPUT);
 4f4:	41 e0       	ldi	r20, 0x01	; 1
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	83 e0       	ldi	r24, 0x03	; 3
 4fa:	0e 94 51 00 	call	0xa2	; 0xa2 <Set_PinDir>
int main ()
{
	u8 key;
	u8 mode;
	u32 Saved_Pass = 1234;
	u32 Reversed_Pass = 4321;
 4fe:	0f 2e       	mov	r0, r31
 500:	f1 ee       	ldi	r31, 0xE1	; 225
 502:	8f 2e       	mov	r8, r31
 504:	f0 e1       	ldi	r31, 0x10	; 16
 506:	9f 2e       	mov	r9, r31
 508:	a1 2c       	mov	r10, r1
 50a:	b1 2c       	mov	r11, r1
 50c:	f0 2d       	mov	r31, r0

int main ()
{
	u8 key;
	u8 mode;
	u32 Saved_Pass = 1234;
 50e:	0f 2e       	mov	r0, r31
 510:	f2 ed       	ldi	r31, 0xD2	; 210
 512:	4f 2e       	mov	r4, r31
 514:	f4 e0       	ldi	r31, 0x04	; 4
 516:	5f 2e       	mov	r5, r31
 518:	61 2c       	mov	r6, r1
 51a:	71 2c       	mov	r7, r1
 51c:	f0 2d       	mov	r31, r0
	Display_Str_Row_Col(0,2,"Welcome Back ");
	_delay_ms(500);
	Set_PinDir(PORT_D,Pin_0,OUTPUT);
	while(1)
	{
		LCD_CLEAR();
 51e:	0e 94 31 02 	call	0x462	; 0x462 <LCD_CLEAR>
		Display_Str_Row_Col(0,2,"Chose a Mode");
 522:	4e e6       	ldi	r20, 0x6E	; 110
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	62 e0       	ldi	r22, 0x02	; 2
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	0e 94 35 02 	call	0x46a	; 0x46a <Display_Str_Row_Col>
 52e:	2f e9       	ldi	r18, 0x9F	; 159
 530:	86 e8       	ldi	r24, 0x86	; 134
 532:	91 e0       	ldi	r25, 0x01	; 1
 534:	21 50       	subi	r18, 0x01	; 1
 536:	80 40       	sbci	r24, 0x00	; 0
 538:	90 40       	sbci	r25, 0x00	; 0
 53a:	e1 f7       	brne	.-8      	; 0x534 <main+0x76>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <main+0x80>
 53e:	00 00       	nop
		_delay_ms(500);
		LCD_CLEAR();
 540:	0e 94 31 02 	call	0x462	; 0x462 <LCD_CLEAR>
		Display_Str("1-Enter Pass");
 544:	8b e7       	ldi	r24, 0x7B	; 123
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 07 02 	call	0x40e	; 0x40e <Display_Str>
		Display_Str_Row_Col(1,0,"2-Change Pass");
 54c:	48 e8       	ldi	r20, 0x88	; 136
 54e:	50 e0       	ldi	r21, 0x00	; 0
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	0e 94 35 02 	call	0x46a	; 0x46a <Display_Str_Row_Col>
		mode = Keypad_GetPressedKey();
 558:	0e 94 78 01 	call	0x2f0	; 0x2f0 <Keypad_GetPressedKey>

		// Code to get the Password From the User
		if ( mode == 1)
 55c:	81 30       	cpi	r24, 0x01	; 1
 55e:	09 f0       	breq	.+2      	; 0x562 <main+0xa4>
 560:	bd c0       	rjmp	.+378    	; 0x6dc <main+0x21e>
		{
			LCD_CLEAR();
 562:	0e 94 31 02 	call	0x462	; 0x462 <LCD_CLEAR>
			Display_Str("Password : ");
 566:	86 e9       	ldi	r24, 0x96	; 150
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 07 02 	call	0x40e	; 0x40e <Display_Str>
			for (u8 i = 0; i<4 ;i++)
 56e:	c0 e0       	ldi	r28, 0x00	; 0
 570:	c1 2c       	mov	r12, r1
 572:	d1 2c       	mov	r13, r1
 574:	76 01       	movw	r14, r12
 576:	4a c0       	rjmp	.+148    	; 0x60c <main+0x14e>
			{
				Send_CMD(CURSOR_ON);
 578:	8e e0       	ldi	r24, 0x0E	; 14
 57a:	0e 94 9f 01 	call	0x33e	; 0x33e <Send_CMD>
 57e:	87 ea       	ldi	r24, 0xA7	; 167
 580:	91 e6       	ldi	r25, 0x61	; 97
 582:	01 97       	sbiw	r24, 0x01	; 1
 584:	f1 f7       	brne	.-4      	; 0x582 <main+0xc4>
 586:	00 c0       	rjmp	.+0      	; 0x588 <main+0xca>
 588:	00 00       	nop
				_delay_ms(100);
				Send_CMD(CURSOR_OFF);
 58a:	8c e0       	ldi	r24, 0x0C	; 12
 58c:	0e 94 9f 01 	call	0x33e	; 0x33e <Send_CMD>

				key = Keypad_GetPressedKey();
 590:	0e 94 78 01 	call	0x2f0	; 0x2f0 <Keypad_GetPressedKey>
 594:	08 2f       	mov	r16, r24
				if ((key>=0) && (key <=9))
 596:	8a 30       	cpi	r24, 0x0A	; 10
 598:	38 f5       	brcc	.+78     	; 0x5e8 <main+0x12a>
				{
					Integer_TO_String (key);
 59a:	0e 94 40 02 	call	0x480	; 0x480 <Integer_TO_String>
 59e:	8f e4       	ldi	r24, 0x4F	; 79
 5a0:	93 ec       	ldi	r25, 0xC3	; 195
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <main+0xe4>
 5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <main+0xea>
 5a8:	00 00       	nop
					_delay_ms(200);
					Display_Str_Row_Col(0,11+i,"*");
 5aa:	6b e0       	ldi	r22, 0x0B	; 11
 5ac:	6c 0f       	add	r22, r28
 5ae:	42 ea       	ldi	r20, 0xA2	; 162
 5b0:	50 e0       	ldi	r21, 0x00	; 0
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	0e 94 35 02 	call	0x46a	; 0x46a <Display_Str_Row_Col>
					LCD_CLEAR();
					Display_Str_Row_Col(0,1,"Invalid Input");
					_delay_ms(500);
					break;
				}
				Comp_Pass += key;
 5b8:	c0 0e       	add	r12, r16
 5ba:	d1 1c       	adc	r13, r1
 5bc:	e1 1c       	adc	r14, r1
 5be:	f1 1c       	adc	r15, r1
				Comp_Pass = Comp_Pass * 10;
 5c0:	cc 0c       	add	r12, r12
 5c2:	dd 1c       	adc	r13, r13
 5c4:	ee 1c       	adc	r14, r14
 5c6:	ff 1c       	adc	r15, r15
 5c8:	d7 01       	movw	r26, r14
 5ca:	c6 01       	movw	r24, r12
 5cc:	88 0f       	add	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	aa 1f       	adc	r26, r26
 5d2:	bb 1f       	adc	r27, r27
 5d4:	88 0f       	add	r24, r24
 5d6:	99 1f       	adc	r25, r25
 5d8:	aa 1f       	adc	r26, r26
 5da:	bb 1f       	adc	r27, r27
 5dc:	c8 0e       	add	r12, r24
 5de:	d9 1e       	adc	r13, r25
 5e0:	ea 1e       	adc	r14, r26
 5e2:	fb 1e       	adc	r15, r27
		// Code to get the Password From the User
		if ( mode == 1)
		{
			LCD_CLEAR();
			Display_Str("Password : ");
			for (u8 i = 0; i<4 ;i++)
 5e4:	cf 5f       	subi	r28, 0xFF	; 255
 5e6:	12 c0       	rjmp	.+36     	; 0x60c <main+0x14e>
					_delay_ms(200);
					Display_Str_Row_Col(0,11+i,"*");
				}
				else
				{
					LCD_CLEAR();
 5e8:	0e 94 31 02 	call	0x462	; 0x462 <LCD_CLEAR>
					Display_Str_Row_Col(0,1,"Invalid Input");
 5ec:	44 ea       	ldi	r20, 0xA4	; 164
 5ee:	50 e0       	ldi	r21, 0x00	; 0
 5f0:	61 e0       	ldi	r22, 0x01	; 1
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	0e 94 35 02 	call	0x46a	; 0x46a <Display_Str_Row_Col>
 5f8:	9f e9       	ldi	r25, 0x9F	; 159
 5fa:	26 e8       	ldi	r18, 0x86	; 134
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	91 50       	subi	r25, 0x01	; 1
 600:	20 40       	sbci	r18, 0x00	; 0
 602:	80 40       	sbci	r24, 0x00	; 0
 604:	e1 f7       	brne	.-8      	; 0x5fe <main+0x140>
 606:	00 c0       	rjmp	.+0      	; 0x608 <main+0x14a>
 608:	00 00       	nop
 60a:	03 c0       	rjmp	.+6      	; 0x612 <main+0x154>
		// Code to get the Password From the User
		if ( mode == 1)
		{
			LCD_CLEAR();
			Display_Str("Password : ");
			for (u8 i = 0; i<4 ;i++)
 60c:	c4 30       	cpi	r28, 0x04	; 4
 60e:	08 f4       	brcc	.+2      	; 0x612 <main+0x154>
 610:	b3 cf       	rjmp	.-154    	; 0x578 <main+0xba>
					break;
				}
				Comp_Pass += key;
				Comp_Pass = Comp_Pass * 10;
			}
			Comp_Pass = Comp_Pass / 10;
 612:	c7 01       	movw	r24, r14
 614:	b6 01       	movw	r22, r12
 616:	2a e0       	ldi	r18, 0x0A	; 10
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	40 e0       	ldi	r20, 0x00	; 0
 61c:	50 e0       	ldi	r21, 0x00	; 0
 61e:	0e 94 b0 04 	call	0x960	; 0x960 <__udivmodsi4>
 622:	69 01       	movw	r12, r18
 624:	7a 01       	movw	r14, r20
 626:	9f e9       	ldi	r25, 0x9F	; 159
 628:	26 e8       	ldi	r18, 0x86	; 134
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	91 50       	subi	r25, 0x01	; 1
 62e:	20 40       	sbci	r18, 0x00	; 0
 630:	80 40       	sbci	r24, 0x00	; 0
 632:	e1 f7       	brne	.-8      	; 0x62c <main+0x16e>
 634:	00 c0       	rjmp	.+0      	; 0x636 <main+0x178>
 636:	00 00       	nop
			_delay_ms(500);
			LCD_CLEAR();
 638:	0e 94 31 02 	call	0x462	; 0x462 <LCD_CLEAR>
			if (Saved_Pass == Comp_Pass)
 63c:	4c 14       	cp	r4, r12
 63e:	5d 04       	cpc	r5, r13
 640:	6e 04       	cpc	r6, r14
 642:	7f 04       	cpc	r7, r15
 644:	11 f5       	brne	.+68     	; 0x68a <main+0x1cc>
			{
				Display_Str("Welcome Back");
 646:	82 eb       	ldi	r24, 0xB2	; 178
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 07 02 	call	0x40e	; 0x40e <Display_Str>
				Set_PinLevel(PORT_D,Pin_0,HIGH);
 64e:	41 e0       	ldi	r20, 0x01	; 1
 650:	60 e0       	ldi	r22, 0x00	; 0
 652:	83 e0       	ldi	r24, 0x03	; 3
 654:	0e 94 bf 00 	call	0x17e	; 0x17e <Set_PinLevel>
				PORTC = (PORTC & 0xF0) | (motor_steps[1] & 0x0F);  // 90
 658:	85 b3       	in	r24, 0x15	; 21
 65a:	80 7f       	andi	r24, 0xF0	; 240
 65c:	8d 2b       	or	r24, r29
 65e:	85 bb       	out	0x15, r24	; 21
 660:	9f eb       	ldi	r25, 0xBF	; 191
 662:	27 e2       	ldi	r18, 0x27	; 39
 664:	89 e0       	ldi	r24, 0x09	; 9
 666:	91 50       	subi	r25, 0x01	; 1
 668:	20 40       	sbci	r18, 0x00	; 0
 66a:	80 40       	sbci	r24, 0x00	; 0
 66c:	e1 f7       	brne	.-8      	; 0x666 <main+0x1a8>
 66e:	00 c0       	rjmp	.+0      	; 0x670 <main+0x1b2>
 670:	00 00       	nop
				_delay_ms(3000);
				PORTC = (PORTC & 0xF0) | (motor_steps[0] & 0x0F);  //   0
 672:	85 b3       	in	r24, 0x15	; 21
 674:	80 7f       	andi	r24, 0xF0	; 240
 676:	81 2b       	or	r24, r17
 678:	85 bb       	out	0x15, r24	; 21
				Set_PinLevel(PORT_D,Pin_0,LOW);
 67a:	40 e0       	ldi	r20, 0x00	; 0
 67c:	60 e0       	ldi	r22, 0x00	; 0
 67e:	83 e0       	ldi	r24, 0x03	; 3
 680:	0e 94 bf 00 	call	0x17e	; 0x17e <Set_PinLevel>
				LCD_CLEAR();
 684:	0e 94 31 02 	call	0x462	; 0x462 <LCD_CLEAR>
 688:	4a cf       	rjmp	.-364    	; 0x51e <main+0x60>
				Comp_Pass = 0;
			}
			else if (Reversed_Pass == Comp_Pass)
 68a:	8c 14       	cp	r8, r12
 68c:	9d 04       	cpc	r9, r13
 68e:	ae 04       	cpc	r10, r14
 690:	bf 04       	cpc	r11, r15
 692:	91 f4       	brne	.+36     	; 0x6b8 <main+0x1fa>
			{
				Display_Str_Row_Col(0,1,"Calling  122");
 694:	4f eb       	ldi	r20, 0xBF	; 191
 696:	50 e0       	ldi	r21, 0x00	; 0
 698:	61 e0       	ldi	r22, 0x01	; 1
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	0e 94 35 02 	call	0x46a	; 0x46a <Display_Str_Row_Col>
 6a0:	9f e3       	ldi	r25, 0x3F	; 63
 6a2:	2d e0       	ldi	r18, 0x0D	; 13
 6a4:	83 e0       	ldi	r24, 0x03	; 3
 6a6:	91 50       	subi	r25, 0x01	; 1
 6a8:	20 40       	sbci	r18, 0x00	; 0
 6aa:	80 40       	sbci	r24, 0x00	; 0
 6ac:	e1 f7       	brne	.-8      	; 0x6a6 <main+0x1e8>
 6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <main+0x1f2>
 6b0:	00 00       	nop
				_delay_ms(1000);
				LCD_CLEAR();
 6b2:	0e 94 31 02 	call	0x462	; 0x462 <LCD_CLEAR>
 6b6:	33 cf       	rjmp	.-410    	; 0x51e <main+0x60>
				Comp_Pass = 0;
			}
			else
			{
				Display_Str_Row_Col(0,1,"Wrong Password");
 6b8:	4c ec       	ldi	r20, 0xCC	; 204
 6ba:	50 e0       	ldi	r21, 0x00	; 0
 6bc:	61 e0       	ldi	r22, 0x01	; 1
 6be:	80 e0       	ldi	r24, 0x00	; 0
 6c0:	0e 94 35 02 	call	0x46a	; 0x46a <Display_Str_Row_Col>
 6c4:	9f e9       	ldi	r25, 0x9F	; 159
 6c6:	26 e8       	ldi	r18, 0x86	; 134
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	91 50       	subi	r25, 0x01	; 1
 6cc:	20 40       	sbci	r18, 0x00	; 0
 6ce:	80 40       	sbci	r24, 0x00	; 0
 6d0:	e1 f7       	brne	.-8      	; 0x6ca <main+0x20c>
 6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <main+0x216>
 6d4:	00 00       	nop
				_delay_ms(500);
				LCD_CLEAR();
 6d6:	0e 94 31 02 	call	0x462	; 0x462 <LCD_CLEAR>
 6da:	21 cf       	rjmp	.-446    	; 0x51e <main+0x60>
				Comp_Pass = 0;
			}
		}

		// Code to Change the Password
		else if (mode == 2)
 6dc:	82 30       	cpi	r24, 0x02	; 2
 6de:	09 f0       	breq	.+2      	; 0x6e2 <main+0x224>
 6e0:	2d c1       	rjmp	.+602    	; 0x93c <__stack+0xdd>
		{
			LCD_CLEAR();
 6e2:	0e 94 31 02 	call	0x462	; 0x462 <LCD_CLEAR>
			Display_Str("Old Pass : ");
 6e6:	8b ed       	ldi	r24, 0xDB	; 219
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	0e 94 07 02 	call	0x40e	; 0x40e <Display_Str>
			for (u8 i = 0; i<4 ;i++)
 6ee:	c0 e0       	ldi	r28, 0x00	; 0
 6f0:	c1 2c       	mov	r12, r1
 6f2:	d1 2c       	mov	r13, r1
 6f4:	76 01       	movw	r14, r12
 6f6:	4a c0       	rjmp	.+148    	; 0x78c <main+0x2ce>
			{
				Send_CMD(CURSOR_ON);
 6f8:	8e e0       	ldi	r24, 0x0E	; 14
 6fa:	0e 94 9f 01 	call	0x33e	; 0x33e <Send_CMD>
 6fe:	8f e4       	ldi	r24, 0x4F	; 79
 700:	93 ec       	ldi	r25, 0xC3	; 195
 702:	01 97       	sbiw	r24, 0x01	; 1
 704:	f1 f7       	brne	.-4      	; 0x702 <main+0x244>
 706:	00 c0       	rjmp	.+0      	; 0x708 <main+0x24a>
 708:	00 00       	nop
				_delay_ms(200);
				Send_CMD(CURSOR_OFF);
 70a:	8c e0       	ldi	r24, 0x0C	; 12
 70c:	0e 94 9f 01 	call	0x33e	; 0x33e <Send_CMD>

				key = Keypad_GetPressedKey();
 710:	0e 94 78 01 	call	0x2f0	; 0x2f0 <Keypad_GetPressedKey>
 714:	08 2f       	mov	r16, r24
				if ((key>=0) && (key <=9))
 716:	8a 30       	cpi	r24, 0x0A	; 10
 718:	38 f5       	brcc	.+78     	; 0x768 <main+0x2aa>
				{
					Integer_TO_String (key);
 71a:	0e 94 40 02 	call	0x480	; 0x480 <Integer_TO_String>
 71e:	8f e4       	ldi	r24, 0x4F	; 79
 720:	93 ec       	ldi	r25, 0xC3	; 195
 722:	01 97       	sbiw	r24, 0x01	; 1
 724:	f1 f7       	brne	.-4      	; 0x722 <main+0x264>
 726:	00 c0       	rjmp	.+0      	; 0x728 <main+0x26a>
 728:	00 00       	nop
					_delay_ms(200);
					Display_Str_Row_Col(0,11+i,"*");
 72a:	6b e0       	ldi	r22, 0x0B	; 11
 72c:	6c 0f       	add	r22, r28
 72e:	42 ea       	ldi	r20, 0xA2	; 162
 730:	50 e0       	ldi	r21, 0x00	; 0
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	0e 94 35 02 	call	0x46a	; 0x46a <Display_Str_Row_Col>
					LCD_CLEAR();
					Display_Str_Row_Col(0,1,"Invalid Input");
					_delay_ms(500);
					break;
				}
				Comp_Pass += key;
 738:	c0 0e       	add	r12, r16
 73a:	d1 1c       	adc	r13, r1
 73c:	e1 1c       	adc	r14, r1
 73e:	f1 1c       	adc	r15, r1
				Comp_Pass = Comp_Pass * 10;
 740:	cc 0c       	add	r12, r12
 742:	dd 1c       	adc	r13, r13
 744:	ee 1c       	adc	r14, r14
 746:	ff 1c       	adc	r15, r15
 748:	d7 01       	movw	r26, r14
 74a:	c6 01       	movw	r24, r12
 74c:	88 0f       	add	r24, r24
 74e:	99 1f       	adc	r25, r25
 750:	aa 1f       	adc	r26, r26
 752:	bb 1f       	adc	r27, r27
 754:	88 0f       	add	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	aa 1f       	adc	r26, r26
 75a:	bb 1f       	adc	r27, r27
 75c:	c8 0e       	add	r12, r24
 75e:	d9 1e       	adc	r13, r25
 760:	ea 1e       	adc	r14, r26
 762:	fb 1e       	adc	r15, r27
		// Code to Change the Password
		else if (mode == 2)
		{
			LCD_CLEAR();
			Display_Str("Old Pass : ");
			for (u8 i = 0; i<4 ;i++)
 764:	cf 5f       	subi	r28, 0xFF	; 255
 766:	12 c0       	rjmp	.+36     	; 0x78c <main+0x2ce>
					_delay_ms(200);
					Display_Str_Row_Col(0,11+i,"*");
				}
				else
				{
					LCD_CLEAR();
 768:	0e 94 31 02 	call	0x462	; 0x462 <LCD_CLEAR>
					Display_Str_Row_Col(0,1,"Invalid Input");
 76c:	44 ea       	ldi	r20, 0xA4	; 164
 76e:	50 e0       	ldi	r21, 0x00	; 0
 770:	61 e0       	ldi	r22, 0x01	; 1
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	0e 94 35 02 	call	0x46a	; 0x46a <Display_Str_Row_Col>
 778:	9f e9       	ldi	r25, 0x9F	; 159
 77a:	26 e8       	ldi	r18, 0x86	; 134
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	91 50       	subi	r25, 0x01	; 1
 780:	20 40       	sbci	r18, 0x00	; 0
 782:	80 40       	sbci	r24, 0x00	; 0
 784:	e1 f7       	brne	.-8      	; 0x77e <main+0x2c0>
 786:	00 c0       	rjmp	.+0      	; 0x788 <main+0x2ca>
 788:	00 00       	nop
 78a:	03 c0       	rjmp	.+6      	; 0x792 <main+0x2d4>
		// Code to Change the Password
		else if (mode == 2)
		{
			LCD_CLEAR();
			Display_Str("Old Pass : ");
			for (u8 i = 0; i<4 ;i++)
 78c:	c4 30       	cpi	r28, 0x04	; 4
 78e:	08 f4       	brcc	.+2      	; 0x792 <main+0x2d4>
 790:	b3 cf       	rjmp	.-154    	; 0x6f8 <main+0x23a>
					break;
				}
				Comp_Pass += key;
				Comp_Pass = Comp_Pass * 10;
			}
			Comp_Pass = Comp_Pass / 10;
 792:	c7 01       	movw	r24, r14
 794:	b6 01       	movw	r22, r12
 796:	2a e0       	ldi	r18, 0x0A	; 10
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	40 e0       	ldi	r20, 0x00	; 0
 79c:	50 e0       	ldi	r21, 0x00	; 0
 79e:	0e 94 b0 04 	call	0x960	; 0x960 <__udivmodsi4>
 7a2:	69 01       	movw	r12, r18
 7a4:	7a 01       	movw	r14, r20
 7a6:	9f e9       	ldi	r25, 0x9F	; 159
 7a8:	26 e8       	ldi	r18, 0x86	; 134
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	91 50       	subi	r25, 0x01	; 1
 7ae:	20 40       	sbci	r18, 0x00	; 0
 7b0:	80 40       	sbci	r24, 0x00	; 0
 7b2:	e1 f7       	brne	.-8      	; 0x7ac <main+0x2ee>
 7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <main+0x2f8>
 7b6:	00 00       	nop
			_delay_ms(500);
			LCD_CLEAR();
 7b8:	0e 94 31 02 	call	0x462	; 0x462 <LCD_CLEAR>
			if (Saved_Pass == Comp_Pass)
 7bc:	4c 14       	cp	r4, r12
 7be:	5d 04       	cpc	r5, r13
 7c0:	6e 04       	cpc	r6, r14
 7c2:	7f 04       	cpc	r7, r15
 7c4:	09 f0       	breq	.+2      	; 0x7c8 <main+0x30a>
 7c6:	a8 c0       	rjmp	.+336    	; 0x918 <__stack+0xb9>

				Comp_Pass = 0;
				Saved_Pass = 0;
				Reversed_Pass = 0;
				Get_Reversed_Pass = 0;
				Display_Str("New Pass : ");
 7c8:	87 ee       	ldi	r24, 0xE7	; 231
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	0e 94 07 02 	call	0x40e	; 0x40e <Display_Str>
				Display_Str_Row_Col(1,0,"Just Numbers");
 7d0:	43 ef       	ldi	r20, 0xF3	; 243
 7d2:	50 e0       	ldi	r21, 0x00	; 0
 7d4:	60 e0       	ldi	r22, 0x00	; 0
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	0e 94 35 02 	call	0x46a	; 0x46a <Display_Str_Row_Col>
				for (u8 i = 0; i<4 ;i++)
 7dc:	c0 e0       	ldi	r28, 0x00	; 0
			LCD_CLEAR();
			if (Saved_Pass == Comp_Pass)
			{

				Comp_Pass = 0;
				Saved_Pass = 0;
 7de:	c1 2c       	mov	r12, r1
 7e0:	d1 2c       	mov	r13, r1
 7e2:	76 01       	movw	r14, r12
				Reversed_Pass = 0;
				Get_Reversed_Pass = 0;
				Display_Str("New Pass : ");
				Display_Str_Row_Col(1,0,"Just Numbers");
				for (u8 i = 0; i<4 ;i++)
 7e4:	42 c0       	rjmp	.+132    	; 0x86a <__stack+0xb>
				{
					Send_CMD(CURSOR_ON);
 7e6:	8e e0       	ldi	r24, 0x0E	; 14
 7e8:	0e 94 9f 01 	call	0x33e	; 0x33e <Send_CMD>
 7ec:	8f e4       	ldi	r24, 0x4F	; 79
 7ee:	93 ec       	ldi	r25, 0xC3	; 195
 7f0:	01 97       	sbiw	r24, 0x01	; 1
 7f2:	f1 f7       	brne	.-4      	; 0x7f0 <main+0x332>
 7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <main+0x338>
 7f6:	00 00       	nop
					_delay_ms(200);
					Send_CMD(CURSOR_OFF);
 7f8:	8c e0       	ldi	r24, 0x0C	; 12
 7fa:	0e 94 9f 01 	call	0x33e	; 0x33e <Send_CMD>

					key = Keypad_GetPressedKey();
 7fe:	0e 94 78 01 	call	0x2f0	; 0x2f0 <Keypad_GetPressedKey>
 802:	08 2f       	mov	r16, r24
					if ((key>=0) && (key <=9))
 804:	8a 30       	cpi	r24, 0x0A	; 10
 806:	c0 f4       	brcc	.+48     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
					{
						Go_To_Row_Col(0,11+i);
 808:	0f 2e       	mov	r0, r31
 80a:	fb e0       	ldi	r31, 0x0B	; 11
 80c:	bf 2e       	mov	r11, r31
 80e:	f0 2d       	mov	r31, r0
 810:	bc 0e       	add	r11, r28
 812:	6b 2d       	mov	r22, r11
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	0e 94 1a 02 	call	0x434	; 0x434 <Go_To_Row_Col>
						Integer_TO_String (key);
 81a:	80 2f       	mov	r24, r16
 81c:	0e 94 40 02 	call	0x480	; 0x480 <Integer_TO_String>
 820:	8f e4       	ldi	r24, 0x4F	; 79
 822:	93 ec       	ldi	r25, 0xC3	; 195
 824:	01 97       	sbiw	r24, 0x01	; 1
 826:	f1 f7       	brne	.-4      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 828:	00 c0       	rjmp	.+0      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 82a:	00 00       	nop
						_delay_ms(200);
						Display_Str_Row_Col(0,11+i,"*");
 82c:	42 ea       	ldi	r20, 0xA2	; 162
 82e:	50 e0       	ldi	r21, 0x00	; 0
 830:	6b 2d       	mov	r22, r11
 832:	80 e0       	ldi	r24, 0x00	; 0
 834:	0e 94 35 02 	call	0x46a	; 0x46a <Display_Str_Row_Col>
					}

					Saved_Pass += key;
 838:	d7 01       	movw	r26, r14
 83a:	c6 01       	movw	r24, r12
 83c:	80 0f       	add	r24, r16
 83e:	91 1d       	adc	r25, r1
 840:	a1 1d       	adc	r26, r1
 842:	b1 1d       	adc	r27, r1
					Saved_Pass = Saved_Pass * 10;
 844:	88 0f       	add	r24, r24
 846:	99 1f       	adc	r25, r25
 848:	aa 1f       	adc	r26, r26
 84a:	bb 1f       	adc	r27, r27
 84c:	6c 01       	movw	r12, r24
 84e:	7d 01       	movw	r14, r26
 850:	cc 0c       	add	r12, r12
 852:	dd 1c       	adc	r13, r13
 854:	ee 1c       	adc	r14, r14
 856:	ff 1c       	adc	r15, r15
 858:	cc 0c       	add	r12, r12
 85a:	dd 1c       	adc	r13, r13
 85c:	ee 1c       	adc	r14, r14
 85e:	ff 1c       	adc	r15, r15
 860:	c8 0e       	add	r12, r24
 862:	d9 1e       	adc	r13, r25
 864:	ea 1e       	adc	r14, r26
 866:	fb 1e       	adc	r15, r27
				Saved_Pass = 0;
				Reversed_Pass = 0;
				Get_Reversed_Pass = 0;
				Display_Str("New Pass : ");
				Display_Str_Row_Col(1,0,"Just Numbers");
				for (u8 i = 0; i<4 ;i++)
 868:	cf 5f       	subi	r28, 0xFF	; 255
 86a:	c4 30       	cpi	r28, 0x04	; 4
 86c:	08 f4       	brcc	.+2      	; 0x870 <__stack+0x11>
 86e:	bb cf       	rjmp	.-138    	; 0x7e6 <main+0x328>
					}

					Saved_Pass += key;
					Saved_Pass = Saved_Pass * 10;
				}
				Saved_Pass = Saved_Pass / 10;
 870:	c7 01       	movw	r24, r14
 872:	b6 01       	movw	r22, r12
 874:	2a e0       	ldi	r18, 0x0A	; 10
 876:	30 e0       	ldi	r19, 0x00	; 0
 878:	40 e0       	ldi	r20, 0x00	; 0
 87a:	50 e0       	ldi	r21, 0x00	; 0
 87c:	0e 94 b0 04 	call	0x960	; 0x960 <__udivmodsi4>
 880:	42 2e       	mov	r4, r18
 882:	53 2e       	mov	r5, r19
 884:	64 2e       	mov	r6, r20
 886:	75 2e       	mov	r7, r21
				Temp_Pass = Saved_Pass;
 888:	62 2f       	mov	r22, r18
 88a:	73 2f       	mov	r23, r19
 88c:	84 2f       	mov	r24, r20
 88e:	95 2f       	mov	r25, r21
			if (Saved_Pass == Comp_Pass)
			{

				Comp_Pass = 0;
				Saved_Pass = 0;
				Reversed_Pass = 0;
 890:	81 2c       	mov	r8, r1
 892:	91 2c       	mov	r9, r1
 894:	54 01       	movw	r10, r8
					Saved_Pass += key;
					Saved_Pass = Saved_Pass * 10;
				}
				Saved_Pass = Saved_Pass / 10;
				Temp_Pass = Saved_Pass;
				while (Temp_Pass > 0)
 896:	20 c0       	rjmp	.+64     	; 0x8d8 <__stack+0x79>
				{
					Get_Reversed_Pass = Temp_Pass % 10;
 898:	2a e0       	ldi	r18, 0x0A	; 10
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	40 e0       	ldi	r20, 0x00	; 0
 89e:	50 e0       	ldi	r21, 0x00	; 0
 8a0:	0e 94 b0 04 	call	0x960	; 0x960 <__udivmodsi4>
					Reversed_Pass = (Reversed_Pass * 10) + Get_Reversed_Pass;
 8a4:	88 0c       	add	r8, r8
 8a6:	99 1c       	adc	r9, r9
 8a8:	aa 1c       	adc	r10, r10
 8aa:	bb 1c       	adc	r11, r11
 8ac:	75 01       	movw	r14, r10
 8ae:	64 01       	movw	r12, r8
 8b0:	cc 0c       	add	r12, r12
 8b2:	dd 1c       	adc	r13, r13
 8b4:	ee 1c       	adc	r14, r14
 8b6:	ff 1c       	adc	r15, r15
 8b8:	cc 0c       	add	r12, r12
 8ba:	dd 1c       	adc	r13, r13
 8bc:	ee 1c       	adc	r14, r14
 8be:	ff 1c       	adc	r15, r15
 8c0:	8c 0c       	add	r8, r12
 8c2:	9d 1c       	adc	r9, r13
 8c4:	ae 1c       	adc	r10, r14
 8c6:	bf 1c       	adc	r11, r15
 8c8:	86 0e       	add	r8, r22
 8ca:	97 1e       	adc	r9, r23
 8cc:	a8 1e       	adc	r10, r24
 8ce:	b9 1e       	adc	r11, r25
					Temp_Pass = Temp_Pass / 10;
 8d0:	62 2f       	mov	r22, r18
 8d2:	73 2f       	mov	r23, r19
 8d4:	84 2f       	mov	r24, r20
 8d6:	95 2f       	mov	r25, r21
					Saved_Pass += key;
					Saved_Pass = Saved_Pass * 10;
				}
				Saved_Pass = Saved_Pass / 10;
				Temp_Pass = Saved_Pass;
				while (Temp_Pass > 0)
 8d8:	61 15       	cp	r22, r1
 8da:	71 05       	cpc	r23, r1
 8dc:	81 05       	cpc	r24, r1
 8de:	91 05       	cpc	r25, r1
 8e0:	d9 f6       	brne	.-74     	; 0x898 <__stack+0x39>
 8e2:	9f e9       	ldi	r25, 0x9F	; 159
 8e4:	26 e8       	ldi	r18, 0x86	; 134
 8e6:	81 e0       	ldi	r24, 0x01	; 1
 8e8:	91 50       	subi	r25, 0x01	; 1
 8ea:	20 40       	sbci	r18, 0x00	; 0
 8ec:	80 40       	sbci	r24, 0x00	; 0
 8ee:	e1 f7       	brne	.-8      	; 0x8e8 <__stack+0x89>
 8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <__stack+0x93>
 8f2:	00 00       	nop
					Get_Reversed_Pass = Temp_Pass % 10;
					Reversed_Pass = (Reversed_Pass * 10) + Get_Reversed_Pass;
					Temp_Pass = Temp_Pass / 10;
				}
				_delay_ms(500);
				LCD_CLEAR();
 8f4:	0e 94 31 02 	call	0x462	; 0x462 <LCD_CLEAR>
				Display_Str("Password changed");
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	91 e0       	ldi	r25, 0x01	; 1
 8fc:	0e 94 07 02 	call	0x40e	; 0x40e <Display_Str>
 900:	9f e9       	ldi	r25, 0x9F	; 159
 902:	26 e8       	ldi	r18, 0x86	; 134
 904:	81 e0       	ldi	r24, 0x01	; 1
 906:	91 50       	subi	r25, 0x01	; 1
 908:	20 40       	sbci	r18, 0x00	; 0
 90a:	80 40       	sbci	r24, 0x00	; 0
 90c:	e1 f7       	brne	.-8      	; 0x906 <__stack+0xa7>
 90e:	00 c0       	rjmp	.+0      	; 0x910 <__stack+0xb1>
 910:	00 00       	nop
				_delay_ms(500);
				LCD_CLEAR();
 912:	0e 94 31 02 	call	0x462	; 0x462 <LCD_CLEAR>
 916:	03 ce       	rjmp	.-1018   	; 0x51e <main+0x60>
			}
			else
			{
				Display_Str_Row_Col(0,1,"Wrong Password");
 918:	4c ec       	ldi	r20, 0xCC	; 204
 91a:	50 e0       	ldi	r21, 0x00	; 0
 91c:	61 e0       	ldi	r22, 0x01	; 1
 91e:	80 e0       	ldi	r24, 0x00	; 0
 920:	0e 94 35 02 	call	0x46a	; 0x46a <Display_Str_Row_Col>
 924:	9f e9       	ldi	r25, 0x9F	; 159
 926:	26 e8       	ldi	r18, 0x86	; 134
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	91 50       	subi	r25, 0x01	; 1
 92c:	20 40       	sbci	r18, 0x00	; 0
 92e:	80 40       	sbci	r24, 0x00	; 0
 930:	e1 f7       	brne	.-8      	; 0x92a <__stack+0xcb>
 932:	00 c0       	rjmp	.+0      	; 0x934 <__stack+0xd5>
 934:	00 00       	nop
				_delay_ms(500);
				LCD_CLEAR();
 936:	0e 94 31 02 	call	0x462	; 0x462 <LCD_CLEAR>
 93a:	f1 cd       	rjmp	.-1054   	; 0x51e <main+0x60>
				Comp_Pass = 0;
			}
		}
		else
		{
			LCD_CLEAR();
 93c:	0e 94 31 02 	call	0x462	; 0x462 <LCD_CLEAR>
			Display_Str_Row_Col(0,1,"Invalid Input");
 940:	44 ea       	ldi	r20, 0xA4	; 164
 942:	50 e0       	ldi	r21, 0x00	; 0
 944:	61 e0       	ldi	r22, 0x01	; 1
 946:	80 e0       	ldi	r24, 0x00	; 0
 948:	0e 94 35 02 	call	0x46a	; 0x46a <Display_Str_Row_Col>
 94c:	9f e9       	ldi	r25, 0x9F	; 159
 94e:	26 e8       	ldi	r18, 0x86	; 134
 950:	81 e0       	ldi	r24, 0x01	; 1
 952:	91 50       	subi	r25, 0x01	; 1
 954:	20 40       	sbci	r18, 0x00	; 0
 956:	80 40       	sbci	r24, 0x00	; 0
 958:	e1 f7       	brne	.-8      	; 0x952 <__stack+0xf3>
 95a:	00 c0       	rjmp	.+0      	; 0x95c <__stack+0xfd>
 95c:	00 00       	nop
 95e:	df cd       	rjmp	.-1090   	; 0x51e <main+0x60>

00000960 <__udivmodsi4>:
 960:	a1 e2       	ldi	r26, 0x21	; 33
 962:	1a 2e       	mov	r1, r26
 964:	aa 1b       	sub	r26, r26
 966:	bb 1b       	sub	r27, r27
 968:	fd 01       	movw	r30, r26
 96a:	0d c0       	rjmp	.+26     	; 0x986 <__udivmodsi4_ep>

0000096c <__udivmodsi4_loop>:
 96c:	aa 1f       	adc	r26, r26
 96e:	bb 1f       	adc	r27, r27
 970:	ee 1f       	adc	r30, r30
 972:	ff 1f       	adc	r31, r31
 974:	a2 17       	cp	r26, r18
 976:	b3 07       	cpc	r27, r19
 978:	e4 07       	cpc	r30, r20
 97a:	f5 07       	cpc	r31, r21
 97c:	20 f0       	brcs	.+8      	; 0x986 <__udivmodsi4_ep>
 97e:	a2 1b       	sub	r26, r18
 980:	b3 0b       	sbc	r27, r19
 982:	e4 0b       	sbc	r30, r20
 984:	f5 0b       	sbc	r31, r21

00000986 <__udivmodsi4_ep>:
 986:	66 1f       	adc	r22, r22
 988:	77 1f       	adc	r23, r23
 98a:	88 1f       	adc	r24, r24
 98c:	99 1f       	adc	r25, r25
 98e:	1a 94       	dec	r1
 990:	69 f7       	brne	.-38     	; 0x96c <__udivmodsi4_loop>
 992:	60 95       	com	r22
 994:	70 95       	com	r23
 996:	80 95       	com	r24
 998:	90 95       	com	r25
 99a:	9b 01       	movw	r18, r22
 99c:	ac 01       	movw	r20, r24
 99e:	bd 01       	movw	r22, r26
 9a0:	cf 01       	movw	r24, r30
 9a2:	08 95       	ret

000009a4 <__tablejump2__>:
 9a4:	ee 0f       	add	r30, r30
 9a6:	ff 1f       	adc	r31, r31
 9a8:	05 90       	lpm	r0, Z+
 9aa:	f4 91       	lpm	r31, Z
 9ac:	e0 2d       	mov	r30, r0
 9ae:	09 94       	ijmp

000009b0 <itoa>:
 9b0:	45 32       	cpi	r20, 0x25	; 37
 9b2:	51 05       	cpc	r21, r1
 9b4:	20 f4       	brcc	.+8      	; 0x9be <itoa+0xe>
 9b6:	42 30       	cpi	r20, 0x02	; 2
 9b8:	10 f0       	brcs	.+4      	; 0x9be <itoa+0xe>
 9ba:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <__itoa_ncheck>
 9be:	fb 01       	movw	r30, r22
 9c0:	10 82       	st	Z, r1
 9c2:	cb 01       	movw	r24, r22
 9c4:	08 95       	ret

000009c6 <__itoa_ncheck>:
 9c6:	bb 27       	eor	r27, r27
 9c8:	4a 30       	cpi	r20, 0x0A	; 10
 9ca:	31 f4       	brne	.+12     	; 0x9d8 <__itoa_ncheck+0x12>
 9cc:	99 23       	and	r25, r25
 9ce:	22 f4       	brpl	.+8      	; 0x9d8 <__itoa_ncheck+0x12>
 9d0:	bd e2       	ldi	r27, 0x2D	; 45
 9d2:	90 95       	com	r25
 9d4:	81 95       	neg	r24
 9d6:	9f 4f       	sbci	r25, 0xFF	; 255
 9d8:	0c 94 ef 04 	jmp	0x9de	; 0x9de <__utoa_common>

000009dc <__utoa_ncheck>:
 9dc:	bb 27       	eor	r27, r27

000009de <__utoa_common>:
 9de:	fb 01       	movw	r30, r22
 9e0:	55 27       	eor	r21, r21
 9e2:	aa 27       	eor	r26, r26
 9e4:	88 0f       	add	r24, r24
 9e6:	99 1f       	adc	r25, r25
 9e8:	aa 1f       	adc	r26, r26
 9ea:	a4 17       	cp	r26, r20
 9ec:	10 f0       	brcs	.+4      	; 0x9f2 <__utoa_common+0x14>
 9ee:	a4 1b       	sub	r26, r20
 9f0:	83 95       	inc	r24
 9f2:	50 51       	subi	r21, 0x10	; 16
 9f4:	b9 f7       	brne	.-18     	; 0x9e4 <__utoa_common+0x6>
 9f6:	a0 5d       	subi	r26, 0xD0	; 208
 9f8:	aa 33       	cpi	r26, 0x3A	; 58
 9fa:	08 f0       	brcs	.+2      	; 0x9fe <__utoa_common+0x20>
 9fc:	a9 5d       	subi	r26, 0xD9	; 217
 9fe:	a1 93       	st	Z+, r26
 a00:	00 97       	sbiw	r24, 0x00	; 0
 a02:	79 f7       	brne	.-34     	; 0x9e2 <__utoa_common+0x4>
 a04:	b1 11       	cpse	r27, r1
 a06:	b1 93       	st	Z+, r27
 a08:	11 92       	st	Z+, r1
 a0a:	cb 01       	movw	r24, r22
 a0c:	0c 94 08 05 	jmp	0xa10	; 0xa10 <strrev>

00000a10 <strrev>:
 a10:	dc 01       	movw	r26, r24
 a12:	fc 01       	movw	r30, r24
 a14:	67 2f       	mov	r22, r23
 a16:	71 91       	ld	r23, Z+
 a18:	77 23       	and	r23, r23
 a1a:	e1 f7       	brne	.-8      	; 0xa14 <strrev+0x4>
 a1c:	32 97       	sbiw	r30, 0x02	; 2
 a1e:	04 c0       	rjmp	.+8      	; 0xa28 <strrev+0x18>
 a20:	7c 91       	ld	r23, X
 a22:	6d 93       	st	X+, r22
 a24:	70 83       	st	Z, r23
 a26:	62 91       	ld	r22, -Z
 a28:	ae 17       	cp	r26, r30
 a2a:	bf 07       	cpc	r27, r31
 a2c:	c8 f3       	brcs	.-14     	; 0xa20 <strrev+0x10>
 a2e:	08 95       	ret

00000a30 <_exit>:
 a30:	f8 94       	cli

00000a32 <__stop_program>:
 a32:	ff cf       	rjmp	.-2      	; 0xa32 <__stop_program>
